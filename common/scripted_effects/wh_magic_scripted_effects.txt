#######################
# BATTLE EFFECTS
#######################
# calc_magic_pool_effect 			# Magic Pool represents how long a mage can cast in battle before exhausting themselves. Based on magic potential, but higher magic power can stretch their power further
# negative_magic_pool_effect 		# Prevents Magic Pool from becoming a negative number
# calc_magic_units_effect 			# Calculate the number of magic units to spawn
# battle_magic_casting_effect 		# Cast Battle Magic
# spawn_magic_units_effect			# Spawn Magic units
# magic_spawn_demons_effect 		# Was summoning these demons intentional or not? Who knows! Chaos is funky
#######################
# MAGE CREATION
#######################
# chance_of_battle_mage_effect 		# Chance to become a Battle Mage
# random_lore_mage_effect			# Activate magic system and assign random lore for mage
# random_lore_effect 				# Assign random Magic Lore
# remove_lore_effect				# Remove any Magic Lore
#######################
# MAGICAL MAINTENENCE
#######################
# magic_lvl_increase_effect			# Sequential increase in magic level
# magic_lvl_decrease_effect			# Sequential decrease in magic level
# magic_power_removal_effect 		# Removes magic power completely
# add_magic_potential_effect		# Add magic potential to character
# magic_power_random_effect			# Removes current magic power and adds random magic power
# magic_power_teach_effect			# Removes current magic power and adds random magic power and learning based on current learning value
# historical_spellcaster_effect		# Setup historical spellcasters by event instead of through each history file
# magic_xp_effect					# Gain a normal amount of magic experience
# magic_xp_major_effect 			# Gain a major amount of magic experience
# magic_xp_massive_effect			# Gain a massive amount of magic experience
# magic_xp_teacher_effect 			# Gain magic experience based on teacher magic power
# magic_power_1_xp_effect			# Set starting XP based on magic power level
# magic_power_2_xp_effect 			# Set starting XP based on magic power level
# magic_power_3_xp_effect			# Set starting XP based on magic power level
# magic_power_4_xp_effect			# Set starting XP based on magic power level
# enable_magic_xp_effect 			# Turns on the XP system for Mages
# level_up_magic_power_effect		# Level up magic power
# reveal_hidden_magic_effect 		# Reveals hidden magic based on character flags
# hide_magic_effect					# Hides magic potential based on character flags
#######################
# LAWS AND LEGALITY
#######################
# last_magic_law_effect 			# Set last active magic law
# magic_law_up_or_down_effect		# Adjust magic law up or down a level
# clr_magic_rights_effect 			# Clear flags related to magic laws and rights
# magic_legal_bloodline_effect		# Create bloodline for legalizing magic
# revert_magic_legal_effect			# Cleanup to clear magic legality flag
# magic_law_pass_effect				# Effect of passing the law, only used when law is passed by voting
# magic_law_effect					# Effect of passing the law
# magic_law_cost_effect				# Cost of changing magic law
# magic_law_refund_effect			# Refund for changing magic law
#######################
# COLLEGES
#######################
# join_magic_society_effect 		# Join College of Magic
# college_finished_effect 			# Done training, If no patricach for the order you get to be the new one
# clr_learning_flags_effect 		# Clear learning Lore character flags
# learn_random_lore_effect 			# Learn a random magic Lore
# create_inital_magister_effect		# Initial Magister setup so Colleges arent empty
# create_new_magister_effect 		# Effect to create a new Magister
# random_college_name_effect		# Assign Semi random name to new college with similar names blocked off to prevent repetitions
# college_building_effect			# Add special building to capital holding
#######################

# Magic Pool represents how long a mage can continue casting in battle before exhausting themselves
calc_magic_pool_effect = {
	# Mostly based on magic potential, but higher magic power can stretch their power further.
	set_variable = { which = MagicPool value = 1 }
	if = {
		limit = {
			trait = magic_potential_1
		}
		change_variable = { which = MagicPool value = 1 }
	}
	else_if = {
		limit = {
			trait = magic_potential_2
		}
		change_variable = { which = MagicPool value = 3 }
	}
	else_if = {
		limit = {
			trait = magic_potential_3
		}
		change_variable = { which = MagicPool value = 6 }
	}
	else_if = {
		limit = {
			trait = magic_potential_4
		}
		change_variable = { which = MagicPool value = 10 }
	}

	if = {
		limit = {
			has_character_modifier = magic_power_1
		}
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_2
		}
		change_variable = { which = MagicPool value = 1 }
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_3
		}
		change_variable = { which = MagicPool value = 2 }
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_4
		}
		change_variable = { which = MagicPool value = 3 }
	}

	#liche priests and tomb kings who know necromancy don't have magic potential, and a lot of them, tomb kings are already OP so will give them a tiny boost
	if = {
		limit = {
			trait = khemri_liche_priest
		}
		change_variable = { which = MagicPool value = 1 }
	}
	else_if = {
		limit = {
			trait = khemri_tomb_king
		}
		change_variable = { which = MagicPool value = 2 }
	}
	if = {
		limit = {
			trait = lore_hag
		}
		if = {
			limit = {
				location = { is_winter = yes }

			}
			change_variable = { which = MagicPool value = 1 }
		}
	}

	#Ice magic is more effective depending on climate
	if = {
		limit = {
			trait = lore_ice
		}
		if = {
			limit = {
				location = { is_winter = yes }

			}
			change_variable = { which = MagicPool value = 1 }
		}
		if = {
			limit = {
				location = { climate = severe_winter }

			}
			change_variable = { which = MagicPool value = 1 }
		}
		else_if	= {
			limit = {
				location = { climate = mild_winter }
			}
			change_variable = { which = MagicPool value = -1 }
		}
		else_if	= {
			limit = {
				location = {
					NOR = {
						climate = severe_winter
						climate = normal_winter
						climate = mild_winter
					}
				}
			}
			change_variable = { which = MagicPool value = -2 }
		}
	}


	#Chaos gets demons as well so they have a lower pool
	if = {
		limit = {
			summons_daemons_in_battle_trigger = yes
			check_variable = { which = MagicPool value = 2 }
		}
		change_variable = { which = MagicPool value = -1 }
	}
	if = {
		limit = {
			summons_undead_in_battle_trigger = yes
			check_variable = { which = MagicPool value = 2 }
		}
		change_variable = { which = MagicPool value = -1 }
	}



	#Artifacts
	if = {
		limit = {
			any_artifact = {
				has_artifact_flag = armor
				NOT = { has_artifact_flag = armoured_caster }
				is_artifact_active = yes
			}
			#All armour is special mage armour for these cultures
			NOR = {
				culture = caledori
				culture = sapherian
				is_strong_trigger = yes
				is_vampire_trigger = yes
				trait = chaos_dwarf_sorcerer
				trait = chaos_dwarf_daemonsmith
			}
		}
		if = {
			limit = {
				any_artifact = {
					has_artifact_flag = armor
					NOT = { has_artifact_flag = armoured_caster }
					is_artifact_active = yes
					quality < 5
				}
			}
			change_variable = { which = MagicPool value = -2 }
		}
		else_if = {
			limit = {
				any_artifact = {
					has_artifact_flag = armor
					NOT = { has_artifact_flag = armoured_caster }
					is_artifact_active = yes
					quality >= 5
				}
			}
			change_variable = { which = MagicPool value = -1 }
		}
	}
	if = {
		limit = {
			any_artifact = {
				has_artifact_flag = power_stone
				is_artifact_active = yes
			}
		}
		change_variable = { which = MagicPool value = 2 }
	}
	if = {
		limit = {
			any_artifact = {
				has_artifact_flag = staff_battle_magic_pool_1
				is_artifact_active = yes
			}
		}
		change_variable = { which = MagicPool value = 1 }
	}
	if = {
		limit = {
			any_artifact = {
				has_artifact_flag = staff_battle_magic_pool_2
				is_artifact_active = yes
			}
		}
		change_variable = { which = MagicPool value = 2 }
	}
	if = {
		limit = {
			any_artifact = {
				has_artifact_flag = staff_battle_magic_pool_3
				is_artifact_active = yes
			}
		}
		change_variable = { which = MagicPool value = 3 }
	}

	#Non Magic traits, skilled mages can will apply their powers at the right times and avoid wasting power
	if = {
		limit = {
			martial < 6
			check_variable = { which = MagicPool value = 2 }
		}
		change_variable = { which = MagicPool value = -1 }
	}
	else_if = {
		limit = {
			martial >= 15
			martial <= 21
		}
		change_variable = { which = MagicPool value = 1 }
	}
	else_if = {
		limit = {
			martial >= 22
			martial <= 30
		}
		change_variable = { which = MagicPool value = 2 }
	}
	else_if = {
		limit = {
			martial > 30
		}
		change_variable = { which = MagicPool value = 3 }
	}
	#For simplicity certain Blood dragon Vampires summoners use the same pool variable with a static number per trait they have.
	if = {
		limit = {
			trait = special_char_red_duke
		}
		set_variable = { which = MagicPool value = 4 }
	}
	#For simplicity Divine magic users have fixed pools as per their rank.
	if = {
		limit = {
			OR = {
				trait = lore_ursun
				trait = lore_ulric
				trait = lore_taalite
				trait = lore_sigmar
				trait = lore_myrmidia
				trait = lore_morr
				trait = lore_manann
				trait = lore_shallya
				trait = lore_verena
			}
		}
		set_variable = { which = MagicPool value = 1 }
		trigger_switch = {
			on_trigger = tier
			baron = { set_variable = { which = MagicPool value = 2 } }
			count = { set_variable = { which = MagicPool value = 3 } }
			duke = { set_variable = { which = MagicPool value = 4 } }
			king = { set_variable = { which = MagicPool value = 5 } }
			emperor = { set_variable = { which = MagicPool value = 6 } }
		}
		if = { 
			limit = { 
				is_theocracy=no 
				is_landed=yes 
			}
			change_variable = { which = MagicPool value = -1 }
		}
	}
	#For simplicity Khorne Daemon summoners use the same pool variable with a static number per trait they have.
	#No else_if as can have more than one trait
	if = {
		limit = {
			trait = khorne_berserker
		}
		set_variable = { which = MagicPool value = 1 }
	}
	if = {
		limit = {
			trait = champion_khorne
		}
		set_variable = { which = MagicPool value = 2 }
	}
	if = {
		limit = {
			trait = chosen_khorne
		}
		set_variable = { which = MagicPool value = 3 }
	}
	if = {
		limit = {
			trait = prince_khorne
		}
		set_variable = { which = MagicPool value = 4 }
	}


	#easier than coding all the else_ifs
	negative_magic_pool_effect = yes
	set_variable = { which = MagicPoolMax which = MagicPool }

	#Reductions
	if = {
		limit = {
			has_character_modifier = magic_siege_pool_reduction_timer
		}
		change_variable = { which = MagicPool value = -1 }
	}
}
# Prevents Magic Pool from becoming a negative number
negative_magic_pool_effect = {
	if = {
		limit = {
			NOT = { check_variable = { which = MagicPool value = 1 } }
		}
		set_variable = { which = MagicPool value = 1 }
	}
}
# Calculate the number of magic units to spawn
calc_magic_units_effect = {
	set_variable = { which = SpellUnitsToSpawn value = 1 }
	if = {
		limit = {
			has_character_modifier = magic_power_1
		}
		change_variable = { which = SpellUnitsToSpawn value = 2 }
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_2
		}
		change_variable = { which = SpellUnitsToSpawn value = 4 }
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_3
		}
		change_variable = { which = SpellUnitsToSpawn value = 6 }
	}
	else_if = {
		limit = {
			has_character_modifier = magic_power_4
		}
		change_variable = { which = SpellUnitsToSpawn value = 9 }
	}

	#More advanced magic gets more
	if = {
		limit = {
			trait = lore_dark_magic
		}
		change_variable = { which = SpellUnitsToSpawn value = 4 }
	}
	else_if = {
		limit = {
			trait = lore_high_magic
		}
		change_variable = { which = SpellUnitsToSpawn value = 4 }
	}
}
# Cast Battle Magic
battle_magic_casting_effect = {
	if = {
		limit = {
			check_variable = {
				which = MagicPool
				value > 0
			}
		}
		calc_magic_units_effect = yes
		subtract_variable = {
			which = MagicPool
			value = 1
		}
		magic_xp_effect = yes
		if = {
			limit = {
				NOT = { khorne_summoner_trigger = yes }
			}
			location = {
				ROOT = {
					if = {
						limit = { is_ruler = yes }
						spawn_magic_units_effect = yes
					}
					else = {
						liege = {
							spawn_magic_units_effect = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				summons_daemons_in_battle_trigger = yes
			}
			location = {
				ROOT = {
					if = {
						limit = { is_ruler = yes }
						magic_spawn_demons_effect = yes
					}
					else = {
						liege = {
							magic_spawn_demons_effect = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				summons_undead_in_battle_trigger = yes
			}
			location = {
				ROOT = {
					if = {
						limit = { is_ruler = yes }
						magic_spawn_undead_effect = yes
					}
					else = {
						liege = {
							magic_spawn_undead_effect = yes
						}
					}
				}
			}
		}
	}
}
# Spawn Magic units
spawn_magic_units_effect = {
	while = {
		limit = {
			check_variable = {
				which = SpellUnitsToSpawn
				value > 0
			}
		}
		if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 16 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 16
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 16 16 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 15 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 15
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 15 15 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 14 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 14
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 14 14 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 13 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 13
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 13 13 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 12 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 12
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 12 12 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 11 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 11
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 11 11 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 10 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 10
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 10 10 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 9 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 9
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 9 9 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 8 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 8
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 8 8 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 7 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 7
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 7 7 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 6 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 6
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 6 6 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 5 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 5
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 5 5 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 4 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 4
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 4 4 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 3 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 3
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 3 3 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 2 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 2
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 2 2 }
				}
				earmark = magical_spells
			}
		}
		else_if = {
			limit = { check_variable = { which = SpellUnitsToSpawn value == 1 } }
			subtract_variable = {
				which = SpellUnitsToSpawn
				value = 1
			}
			#province = PREV to get location scope is needed as using province = THIS on the character has weird results.
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					magical_spells = { 1 1 }
				}
				earmark = magical_spells
			}
		}
	}
}
# Was summoning these demons intentional or not? Who knows! Chaos is funky
magic_spawn_undead_effect = {
	random_list = {
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					undead_horde = { 5 5 }
				}
				earmark = magical_spells
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					undead_horde = { 10 10 }
				}
				earmark = magical_spells
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					undead_horde = { 15 15 }
				}
				earmark = magical_spells
			}
			modifier = {
				factor = 2
				trait = special_char_red_duke
			}
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = impaler
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					undead_horde = { 20 20 }
				}
				earmark = magical_spells
			}
			modifier = {
				factor = 2
				trait = special_char_red_duke
			}
			modifier = {
				factor = 2
				trait = cruel
			}
			modifier = {
				factor = 2
				trait = impaler
			}
		}
	}
}
# Was summoning these demons intentional or not? Who knows! Chaos is funky
magic_spawn_demons_effect = {
	random_list = {
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					daemonic_host = { 5 5 }
				}
				earmark = magical_spells
			}
			modifier = {
				factor = 2
				is_doom_very_low_trigger = yes
			}
			modifier = {
				factor = 1.5
				is_doom_low_trigger = yes
			}
			modifier = {
				factor = 0.5
				is_doom_high_trigger = yes
			}
			modifier = {
				factor = 0
				is_doom_very_high_trigger = yes
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					daemonic_host = { 10 10 }
				}
				earmark = magical_spells
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					daemonic_host = { 15 15 }
				}
				earmark = magical_spells
			}
			modifier = {
				factor = 0.5
				is_doom_low_trigger = yes
			}
			modifier = {
				factor = 2
				is_doom_high_trigger = yes
			}
			modifier = {
				factor = 2
				is_doom_very_high_trigger = yes
			}
			modifier = {
				factor = 1.5
				khorne_summoner_trigger = yes
			}
		}
		25 = {
			spawn_unit = {
				province = PREV
				owner = THIS
				troops = {
					daemonic_host = { 20 20 }
				}
				earmark = magical_spells
			}
			modifier = {
				factor = 0.5
				is_doom_low_trigger = yes
			}
			modifier = {
				factor = 2
				is_doom_high_trigger = yes
			}
			modifier = {
				factor = 4
				is_doom_very_high_trigger = yes
			}
			modifier = {
				factor = 3
				khorne_summoner_trigger = yes
			}
		}
	}
}


#######################

# Chance to become a Battle Mage
chance_of_battle_mage_effect = {
	if = {
		limit = {
			#Only for randomly generated characters
			is_adult = yes
			NOT = { has_character_flag = rolled_chance_to_be_battle_mage }
		}
		set_character_flag = rolled_chance_to_be_battle_mage
		if = {
			limit = {
				NOT = { is_trained_mage_trigger = yes }
			}
			#add trait then remove so we don't have to dupe the burning trigger
			add_trait = magic_potential_1
			if = {
				limit = {
					OR = {
						is_elf = yes
						AND = {
							trait = creature_skaven
							is_female = no
						}
						culture_group = dwarf_chaos_group
						trait = creature_amazon
						trait = creature_skink
						trait = creature_beastman
						trait = fimir_maergh
						trait = fimir_dirach
						AND = {
							is_human = yes
							OR = {
								NOT = { check_if_mage_should_be_burned_trigger = yes }
								trait = peasant_leader
								trait = heresiarch
							}
						}
						trait = creature_orc
						trait = creature_goblin
						trait = creature_hobgoblin
					}
				}
				random_list = { #magic
					990 = {
						remove_trait = magic_potential_1
						#nothing
					}
					10 = {
						remove_trait = magic_potential_1
						remove_trait = magic_potential_2
						remove_trait = magic_potential_3
						remove_trait = magic_potential_4
						clr_character_flag = magic_potential_flag_1
						clr_character_flag = magic_potential_flag_2
						clr_character_flag = magic_potential_flag_3
						clr_character_flag = magic_potential_flag_4
						random_lore_mage_effect = yes
						modifier = {
							factor = 20
							culture=amazon_main
							is_theocracy = yes
						}
						modifier = {
							factor = 0
							follower_of_khorne = yes
						}
						modifier = {
							factor = 20
							is_female = yes
							OR = {
								religion = kislev_gods
								religion = northern_gods
								religion = northern_gods_reformed
							}
							NOT = { year = 2015 }
							#Get some more witchs in the world
						}
						modifier = {
							factor = 0
							trait = witch_hunter
						}
						modifier = {
							factor = 0.5
							is_doom_very_low_trigger = yes
						}
						modifier = {
							factor = 1.5
							is_doom_medium_trigger = yes
						}
						modifier = {
							factor = 2
							is_doom_high_trigger = yes
						}
						modifier = {
							factor = 4
							is_doom_very_high_trigger = yes
						}
						modifier = {
							factor = 1.5
							is_doom_high_trigger = yes
							open_follower_of_any_chaos_gods = yes
						}
						modifier = {
							factor = 3
							is_doom_very_high_trigger = yes
							open_follower_of_any_chaos_gods = yes
						}
						modifier = {
							factor = 3
							is_smart_trigger = yes
						}
						modifier = {
							factor = 6
							#Like a beacon
							top_liege = { has_character_modifier = expelled_k_witch_hunters_order }
							top_liege = { trait = peasant_leader }
							NOT = {
								has_global_flag = magic_legal_old_world
							}
						}
						modifier = {
							factor = 0.1
							is_dumb_trigger = yes
						}
						modifier = {
							factor = 3
							is_learned_trigger = yes
						}
						modifier = {
							factor = 0.3
							has_education_learning_trigger = no
						}
						modifier = {
							factor = 0.1
							NOT = { learning = 7 }
						}
						modifier = {
							factor = 1.5
							OR = {
								#Lets make the mages interesting people
								is_attractive_trigger = yes
								is_unattractive_trigger = yes
							}
						}
						modifier = {
							factor = 0.01
							#Stop swarms of mayor and priest mages
							is_ruler = yes
						}
						modifier = {
							factor = 2
							#These guys actually have formal eduction in magic
							is_elf = yes
						}
						modifier = {
							factor = 3
							#Amazons have the rite of passage that can give magic
							trait = creature_amazon
						}
						modifier = {
							factor = 5
							#Shamans
							OR = {
								trait = creature_goblin
								trait = creature_hobgoblin
								trait = creature_orc
							}
							is_theocracy = yes
						}
						modifier = {
							factor = 1000
							#1 in 100 birth and almost always spellcasters
							trait = fimir_maergh
						}
						modifier = {
							factor = 100
							#Dev Privilege
							has_character_flag = easter_egg
						}
					}
				}
			}
		}
	}
}
# Activate magic system and assign random lore for mage
random_lore_mage_effect = {
	add_magic_potential_effect = yes
	magic_power_random_effect = yes
	enable_magic_xp_effect = yes
	random_lore_effect = yes
	set_character_flag = special_marshal
}
# Assign random Magic Lore
random_lore_effect = {
	if = {
		limit = {
			is_human = yes
			NOT = { religion_group = chaos_gods_group }
		}
		if = {
			limit = {
				OR = {
					religion = ormazd
					religion = kitabid
				}
				NOR = {
					trait = peasant_leader
					trait = heresiarch
				}
			}
			add_trait = arabyan_scholar
		}
		if = {
			limit = {
				OR = {
					trait = peasant_leader
					trait = heresiarch
					top_liege = { has_character_modifier = expelled_k_witch_hunters_order }
					top_liege = { trait = peasant_leader }
				}
				gender_is_allowed_magic_trigger = no
			}
			if = {
				limit = {
					is_female = no
				}
				add_trait = hedge_wizard
			}
			else = {
				add_trait = witch
			}
		}
		random_list = {
			5 = {
				add_trait = lore_ice
				if = {
					limit = {
						is_female = yes
						religion = kislev_gods
					}
					add_trait = ice_witch
				}
				modifier = {
					factor = 10
					OR = {
						religion = kislev_gods
						religion = northern_gods
						religion = northern_gods_reformed
						culture_group = kislevite_group
					}
				}
				modifier = {
					factor = 0
					NOR = {
						religion = kislev_gods
						religion = northern_gods
						religion = northern_gods_reformed
						culture_group = kislevite_group
					}
				}
			}
			5 = {
				if = {
					limit = {
						OR = {
							religion = northern_gods
							religion = northern_gods_reformed
						}
					}
					add_trait = hag_witch
					add_trait = lore_hag
				}
				modifier = {
					factor = 10
					OR = {
						religion = northern_gods
						religion = northern_gods_reformed
					}
				}
				modifier = {
					factor = 0
					NOR = {
						is_female = yes
						religion = kislev_gods
						religion = northern_gods
						religion = northern_gods_reformed
						culture_group = kislevite_group
					}
				}
			}
			5 = {
				add_trait = lore_fire
				#Flashy
				modifier = {
					factor = 5
					culture_group = norscan_group
				}
				modifier = {
					factor = 10
					religion = stromfels
				}
			}
			5 = {
				add_trait = lore_beasts
				modifier = {
					factor = 5
					OR = {
						religion = old_faith
						religion = old_faith_reformed
					}
				}
				modifier = {
					factor = 5
					culture_group = norscan_group
				}
			}
			5 = {
				add_trait = lore_metal
			}
			5 = {
				add_trait = lore_light
				modifier = {
					factor = 3
					is_benevolent_trigger = yes
				}
			}
			5 = {
				add_trait = lore_life
				modifier = {
					factor = 3
					is_benevolent_trigger = yes
				}
				modifier = {
					factor = 5
					OR = {
						religion = old_faith
						religion = old_faith_reformed
					}
				}
				modifier = {
					factor = 10
					religion = shallyan
				}
			}
			5 = {
				add_trait = lore_heavens
				if = {
					limit = {
						OR = {
							religion = draconite
							culture_group = oriental_group
						}
					}
					add_trait = astromancer
				}
				modifier = {
					factor = 10
					OR = {
						religion = draconite
						culture_group = oriental_group
					}
				}
			}
			5 = {
				add_trait = lore_death
			}
			5 = {
				add_trait = lore_shadows
			}
			5 = {
				add_trait = lore_necromancy
				modifier = {
					factor = 10
					religion_group = necromantic_group
				}
				modifier = {
					factor = 0
					NOT = { religion_group = necromantic_group }
				}
			}
		}
	}
	else_if = {
		limit = {
			AND = {
				is_elf = yes
				OR = {
					AND = {
						is_female = no
						NOT = {
							top_liege = {
								trait = malekith
							}
						}
					}
					is_female = yes
				}
			}
		}
		if = {
			limit = {
				culture_group = asur_group
			}
			random_list = {
				50 = {
					add_trait = lore_high_magic
				}
				50 = {
					add_trait = lore_light
				}
			}
			add_trait = asur_mage
		}
		else_if = {
			limit = {
				culture_group = druchii_group
			}
			random_list = {
				50 = {
					add_trait = lore_dark_magic
				}
				50 = {
					add_trait = lore_shadows
				}
			}
			if = {
				limit = {
					is_female = yes
				}
				add_trait = druchii_sorceress
			}
			else = {
				add_trait = druchii_mage
			}
		}
		else_if = {
			limit = {
				culture_group = asrai_group
			}
			add_trait = asrai_spellsinger
			random_list = {
				25 = {
					add_trait = lore_high_magic
				}
				25 = {
					add_trait = lore_dark_magic
				}
				25 = {
					add_trait = lore_shadows
				}
				25 = {
					add_trait = lore_light
				}
			}
		}
	}
	else_if = {
		limit = {
			culture_group = dwarf_chaos_group
		}
		random_list = {
			75 = {
				add_trait = chaos_dwarf_daemonsmith
			}
			25 = {
				add_trait = chaos_dwarf_sorcerer
			}
		}
	}
	else_if = {
		limit = {
			culture_group = skaven_group
		}
		if = {
			limit = {
				culture = skryre
			}
			add_trait = warlock_engineer
		}
		else = {
			add_trait = lore_vermin
		}
	}
	else_if = {
		limit = {
			trait = creature_amazon
		}
		add_trait = lore_beasts
	}
	else_if = {
		limit = {
			OR = {
				trait = creature_goblin
				trait = creature_hobgoblin
				trait = creature_orc
			}
		}
		add_trait = lore_waaagh
		add_trait = greenskin_shaman
	}
	else_if = {
		limit = {
			trait = creature_skink
		}
		add_trait = skink_priest
		random_list = {
			65 = { add_trait = lore_heavens }
			35 = { add_trait = lore_beasts }
		}
	}
	else_if = {
		limit = {
			religion_group = chaos_gods_group
		}
		if = {
			limit = {
				trait = creature_beastman
			}
			add_trait = bray_shaman
		}
		if = {
			limit = {
				open_follower_of_undivided = yes
			}
			add_trait = lore_chaos
		}
		else_if = {
			limit = {
				open_follower_of_nurgle = yes
			}
			add_trait = lore_nurgle
		}
		else_if = {
			limit = {
				open_follower_of_slaanesh = yes
			}
			add_trait = lore_slaanesh
		}
		else_if = {
			limit = {
				open_follower_of_tzeentch = yes
			}
			add_trait = lore_tzeentch
		}
	}
	calc_magic_pool_effect = yes
}
# Remove any Magic Lore
remove_lore_effect = {
	remove_trait = chaos_dwarf_sorcerer
	remove_trait = khemri_liche_priest
	remove_trait = warlock_engineer
	remove_trait = lore_vermin
	remove_trait = lore_dark_magic
	remove_trait = lore_necromancy
	remove_trait = lore_beasts
	remove_trait = lore_heavens
	remove_trait = lore_fire
	remove_trait = lore_metal
	remove_trait = lore_light
	remove_trait = lore_shadows
	remove_trait = lore_life
	remove_trait = lore_death
	remove_trait = lore_high_magic
	remove_trait = lore_slaanesh
	remove_trait = lore_nurgle
	remove_trait = lore_tzeentch
	remove_trait = lore_chaos
	remove_trait = lore_ice
	remove_trait = lore_hag
	remove_trait = ice_witch
	remove_trait = hag_witch
	remove_trait = lore_waaagh
}

#######################

# Sequential increase in magic level
magic_lvl_increase_effect = {
	if = {
		limit = {
			NOR = {
				OR = {
					has_character_modifier = magic_power_1
					has_character_modifier = magic_power_2
					has_character_modifier = magic_power_3
					has_character_modifier = magic_power_4
				}
				check_variable = { which = "cl" value = "1"}
			}
		}
		set_variable  = { which = "cl" value = "1"}
		add_character_modifier = { name = magic_power_1 duration = -1}
		set_variable  = { which = "magicxpthresholdupgrade" value = "25"}
		set_variable  = { which = "magicxpthresholddowngrade" value = "-25"}
	}
	else_if = {
		limit = {
			check_variable = { which = "cl" value = "2"}
		}
		change_variable = { which = "cl" value = 1 }
		Z_magic_power_modifier_calculation = yes
	}
}
# Sequential decrease in magic level
magic_lvl_decrease_effect = {
	if = {
		limit = {
			OR = {
					has_character_modifier = magic_power_1
					check_variable == { which = "cl" value = "1"}
				}
			}
			set_variable  = { which = "cl" value = "0"}
			remove_character_modifier = magic_power_1
			set_variable  = { which = "magicxpthresholdupgrade" value = "25"}
			set_variable  = { which = "magicxpthresholddowngrade" value = "-25"}
		}
	else_if = {
		limit = {
			check_variable = { which = "cl" value = "2"}
		}
		change_variable = { which = "cl" value = -1 }
		Z_magic_power_modifier_calculation = yes
	}
}
# Removes magic power completely
magic_power_removal_effect = {
	remove_character_modifier = magic_power_1
	remove_character_modifier = magic_power_2
	remove_character_modifier = magic_power_3
	remove_character_modifier = magic_power_4
}
# Add magic potential to character
add_magic_potential_effect = {
	if = {
		limit = {
			NOT = { magic_potential_trigger = yes }
		}
		if = {
			limit = {
				OR = {
					has_character_flag = magic_potential_flag_1
					has_character_flag = magic_potential_flag_2
					has_character_flag = magic_potential_flag_3
					has_character_flag = magic_potential_flag_4
				}
			}
			if = {
				limit = {
					has_character_flag = magic_potential_flag_1
				}
				add_trait = magic_potential_1
				clr_character_flag = magic_potential_flag_1
			}
			else_if = {
				limit = {
					has_character_flag = magic_potential_flag_2
				}
				add_trait = magic_potential_2
				clr_character_flag = magic_potential_flag_3
			}
			else_if = {
				limit = {
					has_character_flag = magic_potential_flag_3
				}
				add_trait = magic_potential_3
				clr_character_flag = magic_potential_flag_4
			}
			else_if = {
				limit = {
					has_character_flag = magic_potential_flag_4
				}
				add_trait = magic_potential_4
				clr_character_flag = magic_potential_flag_4
			}
		}
		else_if = {
			limit = {
				has_magic_power_trigger = yes
			}
			if = {
				limit = {
					has_character_modifier = magic_power_1
				}
				add_trait = magic_potential_1
			}
			else_if = {
				limit = {
					has_character_modifier = magic_power_2
				}
				add_trait = magic_potential_2
			}
			else_if = {
				limit = {
					OR = {
						has_character_modifier = magic_power_3
						has_character_modifier = magic_power_4
					}
				}
				random_list = {
					9 = {
						add_trait = magic_potential_3
					}
					1 = {
						add_trait = magic_potential_4
					}
				}
			}
		}
		else = {
			random_list = {
				40 = {
					add_trait = magic_potential_1
				}
				30 = {
					add_trait = magic_potential_2
				}
				7 = {
					add_trait = magic_potential_3
				}
				3 = {
					add_trait = magic_potential_4
				}
			}
		}
		clr_character_flag = recessive_mage
	}
}
# Removes current magic power and adds random magic power
magic_power_random_effect = {
	magic_power_removal_effect = yes
	random_list = {
		60 = {
			add_character_modifier = { name = magic_power_1 duration = -1 }
			set_variable = { which = "cl" value = 1}
			magic_power_1_xp_effect = yes
			change_learning = 1
		}
		35 = {
			add_character_modifier = { name = magic_power_2 duration = -1 }
			set_variable = { which = "cl" value = 2}
			magic_power_2_xp_effect = yes
			change_learning = 2
		}
		4 = {
			add_character_modifier = { name = magic_power_3 duration = -1 }
			set_variable = { which = "cl" value = 3}
			magic_power_3_xp_effect = yes
			change_learning = 5
		}
		1 = {
			add_character_modifier = { name = magic_power_4 duration = -1 }
			set_variable = { which = "cl" value = 4}
			magic_power_4_xp_effect = yes
			change_learning = 8
		}
	}
}
# Removes current magic power and adds random magic power and learning based on current learning value
magic_power_teach_effect = {
	magic_power_removal_effect = yes
	random_list = {
		60 = {
			modifier={
				factor = 0.2
				learning = 20
			}
			modifier={
				factor = 0.4
				learning = 16
			}
			add_character_modifier = { name = magic_power_1 duration = -1 }
			set_variable = { which = "cl" value = 1}
			magic_power_1_xp_effect = yes
			change_learning = 1
		}
		35 = {
			modifier={
				factor=0.5
				learning=20
			}
			modifier={
				factor=0.8
				learning=16
			}
			add_character_modifier = { name = magic_power_2 duration = -1 }
			set_variable = { which = "cl" value = 2}
			magic_power_2_xp_effect = yes
		}
		10 = {
			modifier={
				factor=2
				learning=20
			}
			modifier={
				factor=1.2
				learning=12
			}
			modifier={
				factor=1.6
				learning=16
			}
			add_character_modifier = { name = magic_power_3 duration = -1 }
			set_variable = { which = "cl" value = 3}
			magic_power_3_xp_effect = yes
			change_learning = 1
		}
		5 = {
			modifier={
				factor=2
				learning=20
			}
			modifier={
				factor=1.2
				learning=12
			}
			modifier={
				factor=1.6
				learning=16
			}
			add_character_modifier = { name = magic_power_4 duration = -1 }
			set_variable = { which = "cl" value = 4}
			magic_power_4_xp_effect = yes
			change_learning = 2
		}
	}
}
# Setup historical spellcasters by event instead of through each history file
historical_spellcaster_effect = {
	if = {
		#If we rebalance xp don't want to have to go through all the history files
		limit = {
			historical = yes
			NOT = { khorne_summoner_trigger = yes }
		}
		enable_magic_xp_effect = yes
		if = {
			limit = {
				NOR = {
					khorne_summoner_trigger = yes
					magic_potential_trigger = yes
				}
			}
			add_magic_potential_effect = yes
		}
	}
}
# Gain a normal amount of magic experience
magic_xp_effect = {
	historical_spellcaster_effect = yes
	if = {
		limit = { gain_magic_xp_trigger = yes}
		if = {
			limit = { trait = magic_potential_1 }
			custom_tooltip = {
				text = gain_magic_xp_tt
				change_variable = { which = "magicxp" value = 1 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_2 }
			custom_tooltip = {
				text = gain_magic_xp_tt
				change_variable = { which = "magicxp" value = 2 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_3 }
			custom_tooltip = {
				text = gain_magic_xp_tt
				change_variable = { which = "magicxp" value = 3 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_4 }
			custom_tooltip = {
				text = gain_magic_xp_tt
				change_variable = { which = "magicxp" value = 5 }
			}
		}
		else = {
			#Fallback
			custom_tooltip = {
				text = gain_magic_xp_tt
				change_variable = { which = "magicxp" value = 1 }
			}
		}
		if = {
			limit = {
				trait = creature_slann
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 3 }
			}
		}
		if = {
			limit = {
				is_college_of_magic_member = yes
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 2 }
			}
		}
		#Check for levelup
		character_event = { id = magic_learn_power.1  }
	}
}
# Gain a major amount of magic experience
magic_xp_major_effect = {
	historical_spellcaster_effect = yes
	if = {
		limit = { gain_magic_xp_trigger = yes}
		if = {
			limit = { trait = magic_potential_1 }
			custom_tooltip = {
				text = gain_magic_xp_major_tt
				change_variable = { which = "magicxp" value = 3 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_2 }
			custom_tooltip = {
				text = gain_magic_xp_major_tt
				change_variable = { which = "magicxp" value = 6 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_3 }
			custom_tooltip = {
				text = gain_magic_xp_major_tt
				change_variable = { which = "magicxp" value = 9 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_4 }
			custom_tooltip = {
				text = gain_magic_xp_major_tt
				change_variable = { which = "magicxp" value = 15 }
			}
		}
		else = {
			#Fallback
			custom_tooltip = {
				text = gain_magic_xp_major_tt
				change_variable = { which = "magicxp" value = 3 }
			}
		}
		if = {
			limit = {
				trait = creature_slann
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 15 }
			}
		}
		if = {
			limit = {
				is_college_of_magic_member = yes
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 6 }
			}
		}
		#Check for levelup
		character_event = { id = magic_learn_power.1  }
	}
}
# Gain a massive amount of magic experience
magic_xp_massive_effect = {
	historical_spellcaster_effect = yes
	if = {
		limit = { gain_magic_xp_trigger = yes}
		if = {
			limit = { trait = magic_potential_1 }
			custom_tooltip = {
				text = gain_magic_xp_massive_tt
				change_variable = { which = "magicxp" value = 9 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_2 }
			custom_tooltip = {
				text = gain_magic_xp_massive_tt
				change_variable = { which = "magicxp" value = 18 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_3 }
			custom_tooltip = {
				text = gain_magic_xp_massive_tt
				change_variable = { which = "magicxp" value = 27 }
			}
		}
		else_if = {
			limit = { trait = magic_potential_4 }
			custom_tooltip = {
				text = gain_magic_xp_massive_tt
				change_variable = { which = "magicxp" value = 45 }
			}
		}
		else = {
			#Fallback
			custom_tooltip = {
				text = gain_magic_xp_massive_tt
				change_variable = { which = "magicxp" value = 9 }
			}
		}
		if = {
			limit = {
				trait = creature_slann
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 45 }
			}
		}
		if = {
			limit = {
				is_college_of_magic_member = yes
			}
			hidden_tooltip = {
				change_variable = { which = "magicxp" value = 18 }
			}
		}
		#Check for levelup
		character_event = { id = magic_learn_power.1  }
	}
}
# Gain magic experience based on teacher magic power
magic_xp_teacher_effect = {
	if = {
		limit = { FROM = { has_character_modifier = magic_power_1 } }
		change_variable = { which = magicxp value = 1 }
	}
	else_if = {
		limit = { FROM = { has_character_modifier = magic_power_2 } }
		change_variable = { which = magicxp value = 2 }
	}
	else_if = {
		limit = { FROM = { has_character_modifier = magic_power_3 } }
		change_variable = { which = magicxp value = 3 }
	}
	else_if = {
		limit = { FROM = { has_character_modifier = magic_power_4 } }
		change_variable = { which = magicxp value = 4 }
	}
}
# Set starting XP based on magic power level
magic_power_1_xp_effect = {
	set_variable = { which = "magicxp" value = 0 }
}
# Set starting XP based on magic power level
magic_power_2_xp_effect = {
	set_variable = { which = "magicxp" value = 150 }
}
# Set starting XP based on magic power level
magic_power_3_xp_effect = {
	set_variable = { which = "magicxp" value = 500 }
}
# Set starting XP based on magic power level
magic_power_4_xp_effect = {
	set_variable = { which = "magicxp" value = 1000 }
}
# Turns on the XP system for Mages
enable_magic_xp_effect = {
	set_character_flag = special_marshal
	if = {
		limit = {
			has_magic_power_trigger = yes
			is_trained_mage_trigger = yes
			NOT = { check_variable = { which = "magicxp" value = 1 } }
		}
		if = {
			limit = { has_character_modifier = magic_power_1 }
			set_variable = { which = "cl" value = 1 }
			magic_power_1_xp_effect = yes
		}
		else_if = {
			limit = { has_character_modifier = magic_power_2 }
			set_variable = { which = "cl" value = 2 }
			magic_power_2_xp_effect = yes
		}
		else_if = {
			limit = { has_character_modifier = magic_power_3 }
			set_variable = { which = "cl" value = 3 }
			magic_power_3_xp_effect = yes
		}
		else_if = {
			limit = { has_character_modifier = magic_power_4 }
			set_variable = { which = "cl" value = 4 }
			magic_power_4_xp_effect = yes
		}
	}
	else_if = {
		limit = {
			NOT = { has_magic_power_trigger = yes }
			is_trained_mage_trigger = yes
		}
		level_up_magic_power_effect = yes
	}
}
# Level up magic power
level_up_magic_power_effect = {
	magic_power_removal_effect = yes
	if = {
		limit = { magic_power_1_threshold_trigger = yes }
		set_variable = { which = "cl" value = 1 }
		add_character_modifier = { name = magic_power_1 duration = -1 }
	}
	else_if = {
		limit = { magic_power_2_threshold_trigger = yes }
		set_variable = { which = "cl" value = 2 }
		add_character_modifier = { name = magic_power_2 duration = -1 }
	}
	else_if = {
		limit = { magic_power_3_threshold_trigger = yes }
		set_variable = { which = "cl" value = 3 }
		add_character_modifier = { name = magic_power_3 duration = -1 }
	}
	else_if = {
		limit = { magic_power_4_threshold_threshold_trigger = yes }
		set_variable = { which = "cl" value = 4 }
		add_character_modifier = { name = magic_power_4 duration = -1 }
	}
}
# Reveals hidden magic based on character flags
reveal_hidden_magic_effect = {
	if = {
		limit = { has_character_flag = magic_potential_flag_4 }
		add_trait = magic_potential_4
		clr_character_flag = magic_potential_flag_4
	}
	if = {
		limit = { has_character_flag = magic_potential_flag_3 }
		add_trait = magic_potential_3
		clr_character_flag = magic_potential_flag_3
	}
	if = {
		limit = { has_character_flag = magic_potential_flag_2 }
		add_trait = magic_potential_2
		clr_character_flag = magic_potential_flag_2
	}
	if = {
		limit = { has_character_flag = magic_potential_flag_1 }
		add_trait = magic_potential_1
		clr_character_flag = magic_potential_flag_1
	}
}
# Hides magic potential based on character flags
hide_magic_effect = {
	trigger_switch = {
		on_trigger = trait
		### magic_potential ###
		magic_potential_4 = {
			remove_trait = magic_potential_4
			set_character_flag = magic_potential_flag_4
		}
		magic_potential_3 = {
			remove_trait = magic_potential_3
			set_character_flag = magic_potential_flag_3
		}
		magic_potential_2 = {
			remove_trait = magic_potential_2
			set_character_flag = magic_potential_flag_2
		}
		magic_potential_1 = {
			remove_trait = magic_potential_1
			set_character_flag = magic_potential_flag_1
		}
	}
}

#######################

# Set last active magic law
last_magic_law_effect = {
	if = {
		limit = {
			has_magic_law_0_trigger = yes
		}
		set_character_flag = HadMagicLaw0
	}
	else_if = {
		limit = {
			has_magic_law_1_trigger = yes
		}
		set_character_flag = HadMagicLaw1
	}
	else_if = {
		limit = {
			has_magic_law_2_trigger = yes
		}
		set_character_flag = HadMagicLaw2
	}
	else = {
		set_character_flag = HadMagicLawError
	}
}
# Adjust magic law up or down a level
magic_law_up_or_down_effect = {
	if = {
		limit = {
			OR = {
				AND = {
					has_character_flag = HadMagicLaw0
					has_magic_law_1_trigger = yes
				}
				AND = {
					has_character_flag = HadMagicLaw1
					has_magic_law_2_trigger = yes
				}
			}
		}
		set_character_flag = GivingMoreMagicRights
	}
	else = {
		set_character_flag = TakingAwayMagicRights
	}
}
# Clear flags related to magic laws and rights
clr_magic_rights_effect = {
	clr_character_flag = HadMagicLaw0
	clr_character_flag = HadMagicLaw1
	clr_character_flag = HadMagicLaw2
	clr_character_flag = GivingMoreMagicRights
	clr_character_flag = TakingAwayMagicRights
}
# Create bloodline for legalizing magic
magic_legal_bloodline_effect = {
	if = {
		limit = {
			NOT = { has_global_flag = magic_legal_old_world_first_time }
		}
		set_global_flag = magic_legal_old_world
		set_global_flag = magic_legal_old_world_first_time
	}
	if = {
		limit = {
			has_magic_law_2_trigger = yes
			NOT = {
				any_owned_bloodline = {
					has_bloodline_flag = magic_legacy
					bloodline_is_active_for = PREV
				}
			}
			NOT = { magic_legal_50_years_trigger = yes }
			OR = {
				#Stop loads of random dukes easily passing it and getting loads of credit.
				ai = no
				higher_real_tier_than = KING
				realm_size = 60
				NOT = { has_global_flag = magic_legal_old_world_first_time }
				has_character_flag = mage_peasent_leader
			}
		}
		create_bloodline = { type = magic_legal_bloodline }
	}
}
# Cleanup to clear magic legality flag
revert_magic_legal_effect = {
	if = {
		limit = {
			NOT = {
				any_independent_ruler = {
					has_law = magic_law_2
				}
			}
			NOT = {
				had_global_flag = {
					flag = magic_legal_old_world
					years >= 50
				}
			}
		}
		clr_global_flag = magic_legal_old_world
	}
}
# Effect of passing the law, only used when law is passed by voting
magic_law_pass_effect = {
	set_character_flag = trigger_magic_law_cost
	if = {
		limit = {
			NOT = { has_character_flag = magic_laws_forced }
		}
		clr_magic_rights_effect = yes
		last_magic_law_effect = yes
		character_event = { id =  wh_magic_law.1 days = 1 }
		any_realm_lord = {
			narrative_event = { id =  wh_magic_law.6 days = 1 }
		}
	}
}
# Effect of passing the law
magic_law_effect = {
	if = {
		limit = {
			NOT = { has_character_flag = magic_laws_forced }
			has_character_flag = trigger_magic_law_cost
			has_game_started = yes
		}
		#magic_law_cost_effect = yes
		clr_character_flag = trigger_magic_law_cost
	}
}
# Cost of changing magic law
magic_law_cost_effect = {
	if = {
		limit = {
			real_tier = DUKE
			has_magic_law_any_trigger = yes
		}
		prestige = -2250
		piety = -1750
	}
	else_if = {
		limit = {
			real_tier = KING
			has_magic_law_any_trigger = yes
			any_liege = {
				OR = {
					has_magic_law_1_trigger = yes
					has_magic_law_2_trigger = yes
					has_magic_law_3_trigger = yes
				}
			}
		}
		prestige = -1750
		piety = -1250
	}
	else_if = {
		limit = {
			real_tier = KING
			has_magic_law_any_trigger = yes
		}
		prestige = -2000
		piety = -1500
	}
	else_if = {
		limit = {
			real_tier = EMPEROR
			has_magic_law_any_trigger = yes
		}
		prestige = -1500
		piety = -1000
	}
}
# Refund for changing magic law
magic_law_refund_effect = {
	if = {
		limit = {
			real_tier = DUKE
			has_magic_law_any_trigger = yes
		}
		prestige = 2250
		piety = 1750
	}
	else_if = {
		limit = {
			real_tier = KING
			has_magic_law_any_trigger = yes
			liege = {
				OR = {
					has_magic_law_1_trigger = yes
					has_magic_law_2_trigger = yes
					has_magic_law_3_trigger = yes
				}
			}
		}
		prestige = 1750
		piety = 1250
	}
	else_if = {
		limit = {
			real_tier = KING
			has_magic_law_any_trigger = yes
		}
		prestige = 2000
		piety = 1500
	}
	else_if = {
		limit = {
			real_tier = EMPEROR
			has_magic_law_any_trigger = yes
		}
		prestige = 1500
		piety = 1000
	}
}

#######################

# Join College of Magic
join_magic_society_effect = {
	if = {
		limit = { PREV = { society_member_of = college_of_magic_imperial } }
		join_society = college_of_magic_imperial
	}
	else_if = {
		limit = { PREV = { society_member_of = college_of_magic_dynamic_1 } }
		join_society = college_of_magic_dynamic_1
	}
	else_if = {
		limit = { PREV = { society_member_of = college_of_magic_dynamic_2 } }
		join_society = college_of_magic_dynamic_2
	}
	else_if = {
		limit = { PREV = { society_member_of = college_of_magic_dynamic_3 } }
		join_society = college_of_magic_dynamic_3
	}
	else_if = {
		limit = { PREV = { society_member_of = college_of_magic_dynamic_4 } }
		join_society = college_of_magic_dynamic_4
	}
	else_if = {
		limit = { PREV = { society_member_of = college_of_magic_dynamic_5 } }
		join_society = college_of_magic_dynamic_5
	}
	#Start training if needed
	character_event = { id = COM.300 days = 10 }
}
# Done training, If no patricach for the order you get to be the new one
college_finished_effect = {
	if = {
		limit = { has_character_flag = college_member_learning_on_own }
		add_society_currency_major_effect = yes
	}
	#If no patricach for the order you get to be the new one
	if = {
		limit = {
			society = {
				NOT = {
					any_society_member = {
						check_has_same_lore_as_root = yes
						society_rank == 5
					}
				}
			}
		}
		society_rank_up = 4
	}
}
# Clear learning Lore character flags
clr_learning_flags_effect = {
	clr_character_flag = learning_lore_metal
	clr_character_flag = learning_lore_fire
	clr_character_flag = learning_lore_death
	clr_character_flag = learning_lore_shadows
	clr_character_flag = learning_lore_beasts
	clr_character_flag = learning_lore_heavens
	clr_character_flag = learning_lore_light
	clr_character_flag = learning_lore_life
}
# Learn a random magic Lore
learn_random_lore_effect = {
	random_list = {
		10 = {
			set_character_flag = learning_lore_metal
		}
		10 = {
			set_character_flag = learning_lore_fire
		}
		10 = {
			set_character_flag = learning_lore_death
		}
		10 = {
			set_character_flag = learning_lore_shadows
		}
		10 = {
			set_character_flag = learning_lore_beasts
		}
		10 = {
			set_character_flag = learning_lore_heavens
		}
		10 = {
			set_character_flag = learning_lore_light
		}
		10 = {
			set_character_flag = learning_lore_life
		}
	}
}
# Initial Magister setup so Colleges arent empty
create_inital_magister_effect = {
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_beasts
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_heavens
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_fire
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_metal
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_light
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_shadows
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_life
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	create_new_magister_effect = yes
	new_character = {
		# Set Racial Trait
		character_event = {
			id = aiclean.31
		}
		random_lore_mage_effect = yes
		remove_lore_effect = yes
		add_trait = lore_death
		add_trait = hedge_wizard
		join_society = event_target:magic_society_to_join
		society_rank_up = {
			society = event_target:magic_society_to_join
			rank = 4
		}
	}
	#Create some lower ranks
	set_variable = {
		which = college_mages_to_create
		value = 10
	}
	while = {
		limit = {
			check_variable = { which = college_mages_to_create value > 0 }
		}
		change_variable = {
			which = college_mages_to_create
			value = -1
		}
		create_new_magister_effect = yes
		new_character = {
			# Set Racial Trait
			character_event = {
				id = aiclean.31
			}
			random_lore_mage_effect = yes
			add_trait = hedge_wizard
			join_society = event_target:magic_society_to_join
			random_list = {
				50 = {
					society_rank_up = {
						society = event_target:magic_society_to_join
						rank = 1
					}
				}
				50 = {
					society_rank_up = {
						society = event_target:magic_society_to_join
						rank = 2
					}
				}
				50 = {
					society_rank_up = {
						society = event_target:magic_society_to_join
						rank = 3
					}
				}
			}
		}
	}
}
# Effect to create a new Magister
create_new_magister_effect = {
	random_list = {
		10 = {
			create_random_priest = {
				random_traits = yes
				dynasty = actually_culture
				female = 50
				attributes = {
					diplomacy = 4
					learning = 12
					stewardship = 4
					intrigue = 4
					martial = 4
				}
			}
		}
		10 = {
			create_random_intriguer = {
				random_traits = yes
				dynasty = actually_culture
				female = 50
				attributes = {
					diplomacy = 4
					learning = 4
					stewardship = 4
					intrigue = 12
					martial = 4
				}
			}
		}
		10 = {
			create_random_diplomat = {
				random_traits = yes
				dynasty = actually_culture
				female = 50
				attributes = {
					diplomacy = 12
					learning = 4
					stewardship = 4
					intrigue = 4
					martial = 4
				}
			}
		}
		10 = {
			create_random_soldier = {
				random_traits = yes
				dynasty = actually_culture
				female = 50
				attributes = {
					diplomacy = 4
					learning = 4
					stewardship = 4
					intrigue = 4
					martial = 12
				}
			}
		}
		10 = {
			create_random_steward = {
				random_traits = yes
				dynasty = actually_culture
				female = 50
				attributes = {
					diplomacy = 4
					learning = 4
					stewardship = 12
					intrigue = 4
					martial = 4
				}
			}
		}
	}
}
# Assign Semi random name to new college with similar names blocked off to prevent repetitions
random_college_name_effect = {
	hidden_tooltip = {
		random_list = {
			100 = {
				modifier = {
					factor = 0
					ROOT = {
						NOR = {
							culture = albion_main
							religion = old_faith
							religion = old_faith_reformed
						}
					}
				}
				set_name = "Circle of Truthsayers"
			}
			100 = {
				modifier = {
					factor = 0
					ROOT = {
						NOR = {
							culture = albion_main
							religion = old_faith
							religion = old_faith_reformed
						}
					}
				}
				set_name = "Circle of Soothsayers"
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_1_used } }
				modifier = {
					factor = 0.2
					ROOT = { NOT = { religion = myrmidian } }
				}
				set_name = "[Root.Culture.GetName] College of War Wizards"
				set_global_flag = college_name_1_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_1_used } }
				modifier = {
					factor = 0.2
					ROOT = { NOT = { religion = myrmidian } }
				}
				set_name = "[Root.Culture.GetName] Academy of War Wizards"
				set_global_flag = college_name_1_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_1_used } }
				modifier = {
					factor = 0.2
					ROOT = { NOT = { religion = myrmidian } }
				}
				set_name = "[Root.PrimaryTitle.GetName] College of War Wizards"
				set_global_flag = college_name_1_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_1_used } }
				modifier = {
					factor = 0.2
					ROOT = { NOT = { religion = myrmidian } }
				}
				set_name = "[Root.PrimaryTitle.GetName] Academy of War Wizards"
				set_global_flag = college_name_1_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_1_used } }
				modifier = {
					factor = 0.2
					ROOT = { NOT = { religion = myrmidian } }
				}
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] Academy of War Wizards"
				set_global_flag = college_name_1_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_2_used } }
				set_name = "[Root.Culture.GetName] College of Magic"
				set_global_flag = college_name_2_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_2_used } }
				set_name = "[Root.PrimaryTitle.GetName] College of Magic"
				set_global_flag = college_name_2_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_2_used } }
				set_name = "[Prev.GetName] College of Magic"
				set_global_flag = college_name_2_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_2_used } }
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] College of Magic"
				set_global_flag = college_name_2_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_3_used } }
				set_name = "[Root.Culture.GetName] College of the Arcane"
				set_global_flag = college_name_3_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_3_used } }
				set_name = "[Root.PrimaryTitle.GetName] College of the Arcane"
				set_global_flag = college_name_3_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_3_used } }
				set_name = "[Prev.GetName] College of the Arcane"
				set_global_flag = college_name_3_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_3_used } }
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] College of the Arcane"
				set_global_flag = college_name_3_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_4_used } }
				set_name = "[Root.Culture.GetName] Academy of Magic"
				set_global_flag = college_name_4_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_4_used } }
				set_name = "[Root.PrimaryTitle.GetName] Academy of Magic"
				set_global_flag = college_name_4_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_4_used } }
				set_name = "[Prev.GetName] Academy of Magic"
				set_global_flag = college_name_4_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_4_used } }
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] Academy of Magic"
				set_global_flag = college_name_4_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_5_used } }
				set_name = "[Root.Culture.GetName] Academy of the Arcane"
				set_global_flag = college_name_5_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_5_used } }
				set_name = "[Root.PrimaryTitle.GetName] Academy of the Arcane"
				set_global_flag = college_name_5_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_5_used } }
				set_name = "[Prev.GetName] Academy of the Arcane"
				set_global_flag = college_name_5_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_5_used } }
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] Academy of the Arcane"
				set_global_flag = college_name_5_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_6_used } }
				set_name = "[Root.Culture.GetName] Towers of Wizardry"
				set_global_flag = college_name_6_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_6_used } }
				set_name = "[Root.PrimaryTitle.GetName] Towers of Wizardry"
				set_global_flag = college_name_6_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_6_used } }
				set_name = "[Prev.GetName] Towers of Wizardry"
				set_global_flag = college_name_6_used
			}
			10 = {
				trigger = { NOT = { has_global_flag = college_name_6_used } }
				modifier = {
					factor = 0.1
					ROOT = { NOT = { trait = proud } }
				}
				set_name = "[Root.GetOnlyDynastyName] Towers of Wizardry"
				set_global_flag = college_name_6_used
			}
		}
	}
}
# Add special building to capital holding
college_building_effect = {
	custom_tooltip = {
		text = EVTTOOLTIPecollege_active
		capital_holding = {
			if = {
				limit = {
					holding_type = castle
				}
				add_building = ca_college_of_magic
			}
			else_if = {
				limit = {
					holding_type = city
				}
				add_building = ct_college_of_magic
			}
		}
	}
}
