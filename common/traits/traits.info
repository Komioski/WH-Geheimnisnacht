########################################################################################################
# WARNING: IF YOU DON'T ADD NEW TRAITS LAST (IN THE LAST READ TRAIT FILE), IT WILL BREAK OLD SAVE GAMES!
# WARNING: REMOVING TRAITS WILL BREAK OLD SAVE GAMES!
########################################################################################################
** Always check the Wiki for more info
https://ck2.paradoxwikis.com/Trait_modding

Icon
	Icons make traits easily recognizable to the player.
	An icon can be made in Photoshop or another image editor. It needs to be 24x24 pixels, and saved as a .dds or .tga file.
	When you have your icon, save it in <yourmodfolder>\gfx\traits.
	Now create a file at <yourmodofolder>\interface\<yourmod>.gfx.
	You will use this file to tell the game where the icon is stored.

Localisation
	Traits require the following localization keys:

	<trait_name> : name of the trait
	<trait_name>_desc : description of the trait
	<trait_name>_death : in case the trait reduces heath (health = -1), used to describe the cause for premature "death by trait" (death_reason = death_trait).

	For instance:
	ill_death;after a period of illness;d'une grave maladie;nach einer Zeit der Krankheit;;después de un período de enfermedad;;;;;;;;;x

FORMAT:
name = {
	potential = {
	}
	is_visible = {
		FROM is trait holder, ROOT is character to check, decides if a character can see a trait of someone else, otherwise defaults as visible
	}
	opposites = {
	}
	Type
	Flags

	Opinions

	Rationality

	Compliments

	Modifiers

	customizer = yes/no
	ruler_designer_cost
}

potential:
	will reset when loading saves if this block is used and found incorrect, do not use unless its specifically tailored
	The potential section defines who can randomly start with the trait on campaign start, be randomly generated with the trait (for example via the employment decisions), or gain it randomly when coming of age.
	It does however not affect the outcomes of events giving the trait; even if the character does not meet the potential conditions he can still get the trait via events.
	The potential section is simply one or more conditions. It is put immediately after the opening bracket of the trait.

Visible:
These are simplified to scripted triggers
	hidden_trait = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
			has_game_rule = { name = warhammer_traits value = off }
		}
	}
	visible_trait = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			any_rival = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			same_society_as = FROM
			guardian = { character = FROM }
			any_ward = { character = FROM }
			regent = { character = FROM }
			has_game_rule = { name = warhammer_traits value = off }
		}
	}
	religion_visible_trait = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			any_rival = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			same_society_as = FROM
			religion = FROM
			guardian = { character = FROM }
			any_ward = { character = FROM }
			regent = { character = FROM }
			has_game_rule = { name = warhammer_traits value = off }
		}
	}
	religion_group_visible_trait = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			any_rival = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			same_society_as = FROM
			religion_group = FROM
			guardian = { character = FROM }
			any_ward = { character = FROM }
			regent = { character = FROM }
			has_game_rule = { name = warhammer_traits value = off }
		}
	}
## OLD VALUES MAY STILL BE VALUABLE
	is_visible = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
			spouse = { character = FROM }
			is_within_diplo_range = FROM
			religion = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			society_member_of = FROM
		}
		FROM = { age = 16 }
	}
	# Most #visible_trait
	is_visible = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			society_member_of = FROM
		}
	}
	# hidden_trait
	is_visible = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
		}
	}
	# Crusader
	is_visible = {
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
			society_member_of = FROM
			religion = FROM
		}
	}
	# magic_potential
	is_visible = {
		OR = {
			has_character_flag = magic_potential_known
			detect_magic_trigger = yes
		}
		OR = {
			character = FROM
			any_friend = { character = FROM }
			any_lover = { character = FROM }
			is_close_relative = FROM
			any_courtier_or_vassal = { character = FROM }
			liege = { character = FROM }
		}
	}

Type:
	The trait icons are grouped by type in-game, from left to right:
	education > creature > leadership > magic > caste_tier > congenital > undefined > lifestyle > personality > is_health

	Inside a group, the order is based on the order the traits have been added to the character

Flags:
After defining the trait itself, you'll want to define its flags. The flags you can use are listed below:

	A newborn can inherit the trait from a parent (optional); if both parents have the trait, uses two trials of same chance
	inherit_chance
	both_parent_has_trait_inherit_chance

	agnatic											Children of a father with this trait will always inherit the trait
	enatic											Children of a mother with this trait will always inherit the trait
	birth												Given number out of every 10000 characters born will receive this trait, (e.g., 100 = 1%)
	inbred											The trait indicates that the character is inbred, affecting offspring and fertility and natural death causes
	rebel_inherited							Used for peasant leader and heresiarch in vanilla. When characters with such traits win the revolt war and die without an heir the successor also gains the peasant leader/heresiarch trait.

	blinding										The trait reflects permanent blinding of the character while imprisoned. In some cultures, this disinherits them.
	immortal										Once this trait is applied, the character will no longer age nor die naturally (but can die from execution or the effect death).
	in_hiding										The trait activates in_hiding status
	incapacitating							The character is weak and needs a regent
	pilgrimage									The character is temporarily away and will need a regent but does not lose any wards

	is_epidemic									The trait is given by an epidemic outbreak.
	is_health										The trait affects the health of a character, usually restricting certain events that require full health.
	is_illness									The trait is a regular disease.
	is_symptom

	can_hold_titles							The trait prevents the character from holding any titles
	cannot_inherit							The trait prevents the character from inheriting any titles
	cannot_marry								The trait prevents the character from marrying. Does not prevent concubinage.

	leader											The trait is a command/leadership trait.
	leadership_traits						The character automatically receives X number of leadership traits (army command traits).

	vice
	virtue

	childhood										The trait is a childhood trait.
	lifestyle										The trait is a lifestyle choice.
	personality									The trait is a personality trait
	caste_tier									The trait is a caste trait, and caste_tier defines the order of the castes
	education										The trait is an educational trait.
	attribute										Main attribute, in case of education traits.

	prevent_decadence						The trait prevents the Muslim character from accumulating decadence

	priest											The trait implies a theological education. See is_priest condition) #priest = yes #Only for education traits
	religious										The trait is religious in nature and should be automatically discarded upon religion change. Note: it will also be discarded upon pagan reformation.
	religious_branch						The trait identifies a sect of that religion. This will also make the children inherit the trait on birth.
	tolerates_<religion_group>	The character tolerates characters of that religion group and is tolerated by them. <religion_group> is dynamic and may be a group not present in vanilla.

	is_visible									Conditions for the trait to be visible: ROOT the character looking at the trait FROM is the character with the trait Typically a character should see their own traits, so at least character = FROM is used.
	hidden											Hidden traits are not shown in character view.
	hidden_from_others					The trait will only be visible to the player who has the trait, even other players with the same trait won't see it.
	same_trait_visibility				The trait will only be visible on other characters if the player also has it. Handy for things like secret societies, cults, and secret bears.

	opposites										List of traits that cannot be held simultaneously with this trait
	cached											All characters that have this trait will be cached for more efficient event trigger evaluation (should be a limited number). Then the character scope <trait_name> = {} can be use to scope to all characters with that trait.
	random											With random = no, the trait will not be given to randomly-generated characters (when the game starts or when characters are spawned other than by being born). random = yes is the default.
	succession_gfx

	customizer									If no, Blocks the trait from being available for selection in the Ruler Designer
	ruler_designer_cost					Sets a custom cost (in years of ruler's age, positive or negative) for this trait in the Ruler Designer.

Opinions:
	general_opinion
	church_opinion
	christian_church_opinion
	spouse_opinion
	sex_appeal_opinion
	dynasty_opinion
	liege_opinion
	vassal_opinion
	infidel_opinion
	opposite_opinion
	same_opinion
	same_opinion_if_same_religion
	twin_opinion
	ambition_opinion
	same_religion_opinion
	unreformed_tribal_opinion

Rationality
AI Weights, which affect how non-player characters will act (most of which primarily affect strategic considerations)
	ai_honor
	ai_zeal
	ai_greed
	ai_ambition
	ai_rationality

Compliments
	Since Way of Life it is possible to define localisation keys for compliments and insults which will appear in letters from other characters,
	or in any other localised text via the [GetRootFromCompliment] and [GetRootFromInsult] (etc.) localisation commands.
	These keys will need to be localised.

	male_compliment					Compliments in a letter to a man/woman
	female_compliment				Compliments in a letter to a man/woman

	male_compliment_adj			Positive Adjectives in a letter to a man/woman
	female_compliment_adj		Positive Adjectives in a letter to a man/woman

	male_insult							Insults in a letter to a man/woman
	female_insult						Insults in a letter to a man/woman

	male_insult_adj					Negative Adjectives in a letter to a man/woman
	female_insult_adj				Negative Adjectives in a letter to a man/woman

	child_compliment				Compliments in a letter written by a child, used instead of the adult ones
	child_compliment_adj		Positive adjectives in a letter written by a child, used instead of the adult ones

	child_insult						Insults in a letter written by a child, used instead of the adult ones
	child_insult_adj				Negative Adjectives in a letter written by a child, used instead of the adult ones

Modifiers:
	After setting the trait's flags, you'll likely want to give it some character modifiers and/or a command modifier.

	See Modifiers on wiki for character modifiers

	*Command Modifier	(Scales by tier from 0.02 - 0.10)
    morale_offence, morale_defence, defence, speed, retreat, damage,
    siege, random, flank, center, cavalry, religious_enemy, <phase>,
    <unit_type>, <terrain>, narrow_flank, winter_supply, winter_combat

    command_modifier = {
      <modifier> = 0.02
    }
