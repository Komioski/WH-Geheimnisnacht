####################################
# Reserved IDs: 0-999, 40000 - 44999
# Warhammer IDs Marriage fudging: 50000-50010
# Warhammer trait inheritence: 45340
# Warhammer destory indestructible artifacts 50020
####################################

###SILFAE'S NOTE: EVENTS CHANGED FROM VANILLA: 212, 214, 216, 330 COMPLETELY REVISED TO PREVENT INTERRACIAL MARRIAGES
namespace = diploresponse

# ID 1 and 2 are empty dummy events that are used by the message system to spawn messages
# that should be displayed as events, their descriptions are filled in by the message system
letter_event = {
	id = 1

	is_triggered_only = yes

	#desc = "A"
}

character_event = {
	id = 2

	is_triggered_only = yes

	#desc = "B"
}

# Killer discovered after murder - consequences.
# (Should be fired for the killer just before the victim dies. Victim is event_target:target_victim.)
character_event = {
	id = 10

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		#if = { # Moved to on death instead to cover undiscovered murders.
		#	limit = {
		#		ai = no
		#		event_target:target_victim = { any_spouse = { character = ROOT } }
		#		NOT = { has_character_flag = achievement_spouse_killer }
		#	}
		#	set_character_flag = achievement_spouse_killer
		#}

		if = {
			limit = { NOT = { has_character_modifier = known_murderer } }
			add_character_modifier = {
				name = known_murderer
				years = 50
			}
		}

		event_target:target_victim = { save_event_target_as = kinslayer_target }
		add_kinslayer_trait_effect = yes

		event_target:target_victim = {
			any_spouse = {
				opinion = {
					who = ROOT
					modifier = opinion_spouse_slayer
					months = 60
				}
			}
			any_liege = {
				if = {
					limit = {
						is_close_relative = PREV
						NOT = { character = ROOT }
						NOT = { is_close_relative = ROOT }
					}
					opinion = {
						who = ROOT
						modifier = opinion_regicide_traitor
					}
				}
			}

			if = {
				limit = {
					NOT = { dynasty = ROOT }
				}
				any_dynasty_member = {
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
				}
			}

			top_liege = {
				opinion = {
					who = ROOT
					modifier = opinion_dishonorable
					months = 60
				}
				any_realm_lord = {
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
				}
			}
			religion_head = {
				opinion = {
					who = ROOT
					modifier = opinion_dishonorable
					months = 60
				}
			}

			if = {
				limit = {
					mother = {
						NOT = { character = ROOT }
						NOT = { is_mother = ROOT }
					}
				}
				mother = {
					opinion = {
						who = ROOT
						modifier = opinion_killed_close_kin
						months = 1200
					}
					add_rival = ROOT
				}
			}
			if = {
				limit = {
					father = {
						NOT = { character = ROOT }
						NOT = { is_father = ROOT }
					}
				}
				father = {
					opinion = {
						who = ROOT
						modifier = opinion_killed_close_kin
						months = 1200
					}
					add_rival = ROOT
				}
			}

			any_child = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = ROOT }
				}
				opinion = {
					who = ROOT
					modifier = opinion_killed_close_kin
					months = 1200
				}
				add_rival = ROOT
			}

			any_sibling = {
				limit = {
					NOT = { character = ROOT }
					NOT = { sibling = ROOT }
				}
				opinion = {
					who = ROOT
					modifier = opinion_killed_close_kin
					months = 1200
				}
			}
			if = { #If target was a landless Dwarf, get Grudged On by their dynastic head
				limit = {
					trait = creature_dwarf
					religion_group = dwarf_gods_group
					ROOT = {
						NOR ={
								trait = creature_orc
								trait = creature_goblin
								trait = creature_hobgoblin
								trait = creature_skaven
						}
					}
				}
				random_dynasty_member  = {
					limit = {
						NOT = { character = event_target:target_victim }
						is_ruler = yes
					}
					set_character_flag = dwarf_grudge_plot_discovered_dead_relative
					character_event = { id = DR_dwarfs.50 }
				}
			}
		}
	}
}


# Attacker discovered after failed murder - consequences.
# (Should be fired for the attacker. The victim is event_target:target_victim.)
character_event = {
	id = 11

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		event_target:target_victim = {
			opinion = {
				who = ROOT
				modifier = opinion_murder_attempt
				months = 600
			}

			any_liege = {
				limit = {
					is_close_relative = PREV
					NOT = { character = ROOT }
					NOT = { dynasty = ROOT }
				}
				opinion = {
					who = ROOT
					modifier = opinion_dishonorable
					months = 60
				}
			}

			if = {
				limit = {
					NOT = { dynasty = ROOT }
				}
				any_dynasty_member = {
					opinion = {
						who = ROOT
						modifier = opinion_dishonorable
						months = 60
					}
				}
			}

			if = {
				limit = {
					mother = {
						NOT = { character = ROOT }
						NOT = { is_mother = ROOT }
					}
				}
				mother = {
					opinion = {
						who = ROOT
						modifier = attempted_murder_of_child
						months = 120
					}
				}
			}
			if = {
				limit = {
					father = {
						NOT = { character = ROOT }
						NOT = { is_father = ROOT }
					}
				}
				father = {
					opinion = {
						who = ROOT
						modifier = attempted_murder_of_child
						months = 120
					}
				}
			}

			any_child = {
				limit = {
					NOT = { character = ROOT }
					NOT = { is_child_of = ROOT }
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_parent
					months = 120
				}
			}

			any_sibling = {
				limit = {
					NOT = { character = ROOT }
					NOT = { sibling = ROOT }
				}
				opinion = {
					who = ROOT
					modifier = attempted_murder_of_sibling
					months = 60
				}
			}
			if = { #If target is a Dwarf and plot is discovered, get Grudged On
				limit = {
					ROOT = {
						NOR ={
								trait = creature_orc
								trait = creature_goblin
								trait = creature_hobgoblin
								trait = creature_skaven
						}
					}
					trait = creature_dwarf
					religion_group = dwarf_gods_group
				}
				set_character_flag = dwarf_grudge_plot_discovered
				character_event = { id = DR_dwarfs.50 }
			}
		}
	}
}


##########################################
# ADULTERY DISCOVERED
##########################################
# Fired for an unfaithful spouse who was discovered cheating
# Do not fire for both adulterers!
# Adulterer: event_target:target_adulterer
###########################################

character_event = {
	id = 20

	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_character_flag = adultery_discovered
		if = {
			limit = {
				any_spouse = { character = event_target:target_adulterer }
			}
			break = yes
		}

		if = {
			limit = {
				has_nickname = no
				random = 95 # 5% chance
			}
			give_nickname = nick_the_unchaste
		}

		if = {
			limit = {
				religion_group = old_world_group
				OR = {
					AND = {
						is_ruler = yes
						is_theocracy = yes
					}
					is_ascetic_trigger = yes
				}
			}
			add_character_modifier = {
				name = adulterous_priest
				years = 20
			}
			piety = -100
		}

		event_target:target_adulterer = {
			ROOT = {
				if = {
					limit = {
						is_female = yes
						PREV = { is_female = no } # No one cares if two women fool around
					}

					if = {
						limit = {
							is_married = yes
							has_nickname = no
							random = 50
						}
						give_nickname = nick_the_unfaithful
					}

					if = {
						limit = {
							is_pregnant = yes
							father_of_unborn_known = no
							father_of_unborn = {
								character = PREV
							}
						}
						father_of_unborn_known = yes
					}

					if = {
						limit = {
							age_diff = {
								who = PREV
								years = 25
							}
							is_older_than = FROMFROM
							NOT = { has_character_modifier = cradle_robber }
						}
						add_character_modifier = {
							name = cradle_robber
							years = 5
						}
					}


					any_consort = { #Extra check for concubines
						limit = { character = FROM }
						opinion = {
							who = PREV
							modifier = opinion_unfaithful_wife
							months = 120
						}
						opinion = {
							who = PREVPREV
							modifier = opinion_cuckolded
							months = 120
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}
						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
					}


					any_spouse = {
						limit = { PREVPREV = { is_female = no } }
						opinion = {
							who = PREV
							modifier = opinion_unfaithful_wife
							months = 120
						}
						opinion = {
							who = PREVPREV
							modifier = opinion_cuckolded
							months = 120
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}
						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
					}

					if = {
						limit = {
							is_close_relative = PREV
							NOT = { religion = ormazd }
							NOT = { religion = kitabid }
						}
						add_character_modifier = {
							name = incestuous_adulteress
							years = 20
						}
					}
					if = {
						limit = {
							OR = {
								NOT = { is_close_relative = PREV }
								religion = ormazd
								religion = kitabid
							}
						}
						add_character_modifier = {
							name = adulteress
							years = 10
						}
					}
				}

				if = {
					limit = { is_female = no }

					any_spouse = {
						if = {
							limit = { gender_equality_trigger = no }
							opinion = {
								who = PREV
								modifier = opinion_unfaithful_husband
								years = 10
							}
						}
						if = {
							limit = { gender_equality_trigger = yes }
							opinion = {
								who = PREV
								modifier = opinion_unfaithful_husband_crime
								years = 10
							}
						}
						opinion = {
							who = PREVPREV
							modifier = slut_seductress
							months = 120
						}
						if = {
							limit = {
								NOT = { is_rival = PREVPREV }
								NOT = { is_lover = PREVPREV }
								NOT = { is_friend = PREVPREV }
								NOT = { trait = kind }
								NOT = { trait = content }
							}
							add_rival = PREVPREV
						}

						if = {
							limit = { is_lover = PREV }
							remove_lover = PREV
						}
						if = {
							limit = { is_lover = PREVPREV }
							remove_lover = PREVPREV
						}
						if = {
							limit = { is_friend = PREVPREV }
							remove_friend = PREVPREV
						}
					}

					if = {
						limit = { same_sex = PREV }
						if = {
							limit = {
								OR = {
									religion = norscan_gods
									religion = norscan_gods_reformed
									religion = northern_gods
									religion = northern_gods_reformed
								}
							}
							add_character_modifier = {
								name = known_sodomite_pagan
								years = 20
							}
						}
						if = {
							limit = {
								NOR = {
									religion = norscan_gods
									religion = norscan_gods_reformed
									religion = northern_gods
									religion = northern_gods_reformed
								}
							}
							add_character_modifier = {
								name = known_sodomite
								years = 20
							}
						}
					}

					if = {
						limit = {
							is_close_relative = PREV
							NOT = { religion = ormazd }
							NOT = { religion = kitabid }
						}
						add_character_modifier = {
							name = incestuous_adulterer
							years = 20
						}
					}
					if = {
						limit = {
							is_married = yes
							OR = {
								NOT = { is_close_relative = PREV }
								religion = ormazd
								religion = kitabid
							}
						}
						if = {
							limit = {
								NOR = {
									religion = norscan_gods
									religion = norscan_gods_reformed
									religion = northern_gods
									religion = northern_gods_reformed
								}
							}
							add_character_modifier = {
								name = adulterer
								years = 10
							}
						}
					}
				}
			}

			# Fire this event for the adulterer too
			if = {
				limit = {
					NOT = { has_character_flag = adultery_discovered }
					is_alive = yes
					is_dying = no
				}
				ROOT = { save_event_target_as = target_adulterer }
				character_event = { id = 20 }
			}

#			log = "20: Adultery discovered between [Root.GetTitledName] and [This.GetTitledName]!"
		}

		clear_event_target = target_adulterer
		clr_character_flag = adultery_discovered
	}
}


# On-action event: Avoided imprison, declared independence
character_event = {
	id = 150
	desc = "EVTDESC150"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	immediate = {
		FROM = { character_event = { id = 40000 } }
	}

	option = {
		name = "EVTOPTA150"
		chronicle = {
			entry = CHRONICLE_AVOID_IMPRISON_WAR
			portrait = [From.GetID]
		}
	}
}

character_event = {
	id = 40000
	desc = EVTDESC40000
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40000"
		chronicle = {
			entry = CHRONICLE_FAILED_IMPRISON_WAR
			portrait = [From.GetID]
		}
	}
}

# On-action event: Was imprisoned
character_event = {
	id = 151
	desc = "EVTDESC151"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		hidden_tooltip = {
			opinion = {
				who = FROM
				modifier = opinion_arrest_attempt
				months = 120
			}
			FROM = {
				character_event = { id = 40001 }
			}
		}
	}

	option = {
		name = "EVTOPTA151"
	}
}

character_event = {
	id = 40001
	desc = "EVTDESC40001"
	picture = "GFX_evt_into_the_dungeon"
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = "EXCELLENT"
	}
}

# on_avoided_imprison_fled_country
character_event = {
	id = 152
	desc = "EVTDESC152"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	immediate = {
		hidden_tooltip = {
			opinion = {
				who = FROM
				modifier = opinion_arrest_attempt
				months = 120
			}

			FROM = {
				character_event = { id = 40002 }
			}
		}
	}

	option = {
		name = "OK"
	}
}

character_event = {
	id = 40002
	desc = "EVTDESC40002"
	picture = GFX_evt_burning_house
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40002"
	}
}

# on_released_FROM_prison
character_event = {
	id = 153
	desc = "EVTDESC153"
	picture = GFX_evt_recovery

	is_triggered_only = yes

	option = {
		name = "EVTOPTA153"
		opinion = {
			who = FROM
			modifier = opinion_merciful
			months = 60
		}
	}
}

# on_executed
character_event = {
	id = 154
	desc = EVTDESC154
	picture = GFX_evt_beheading

	is_triggered_only = yes

	immediate = {
		any_spouse = {
			opinion = {
				who = FROM
				modifier = opinion_spouse_slayer
				months = 60
			}
		}
		FROM = {
			ROOT = { save_event_target_as = kinslayer_target }
			add_kinslayer_trait_effect = yes
		}
		#set_character_flag = achievement_spouse_killer #Moved to on_death to also cover undiscovered murder plots.
	}

	option = {
		name = "EVTOPTA154"
	}
}

# on_exiled
character_event = {
	id = 155
	desc = "EVTDESC155"
	picture = GFX_evt_carriage

	is_triggered_only = yes

	option = {
		name = "EVTOPTA155"
	}
}

# on_failed_assassination - no harm done
character_event = {
	id = 156
	desc = "EVTDESC156"
	picture = "GFX_evt_shadow"

	hide_FROM = yes
	is_triggered_only = yes

	immediate = {
		FROM = { character_event = { id = 40003 } }
	}

	option = {
		name = "EVTOPTA156"
	}
}

# on_failed_assassination - involvement remains unknown
character_event = {
	id = 40003
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"

	hide_FROM = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40003"
	}
}

# on_failed_assassination - wounded
character_event = {
	id = 157
	desc = "EVTDESC157"
	picture = "GFX_evt_shadow"

	hide_FROM = yes

	is_triggered_only = yes

	trigger = {
		NOT = { trait = wounded }
		NOT = { is_maimed_trigger = yes }
	}

	immediate = {
		FROM = { character_event = { id = 40004 } }
	}

	option = {
		name = "EVTOPTA157"
		add_trait = wounded
	}
}

character_event = {
	id = 40004
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"

	hide_FROM = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40004"
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 158
	desc = "EVTDESC158"
	picture = "GFX_evt_shadow"

	hide_FROM = yes

	is_triggered_only = yes

	trigger = {
		can_be_maimed_trigger = yes
	}

	weight_multiplier = {
		days = 1
		modifier = {
			factor = 3
			trait = wounded
		}
	}

	immediate = {
		FROM = { character_event = { id = 40005 } }
	}

	option = {
		name = "EVTOPTA158"
		add_maimed_trait_effect = yes
	}
}

character_event = {
	id = 40005
	desc = "EVTDESC40003"
	picture = "GFX_evt_shadow"

	hide_FROM = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40005"
	}
}

# on_failed_assassination_disc - no harm done
character_event = {
	id = 159
	desc = EVTDESC159
	picture = GFX_evt_shadow

	is_triggered_only = yes

	immediate = {
		save_event_target_as = target_victim
		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40006 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA159"

		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}

# on_failed_assassination - divulged my name!
character_event = {
	id = 40006
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_FROM = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40006"
		piety = -50
	}
}

# on_failed_assassination_disc - wounded
character_event = {
	id = 160
	desc = "EVTDESC160"
	picture = "GFX_evt_shadow"

	is_triggered_only = yes

	trigger = {
		NOT = { trait = wounded }
		NOT = { is_maimed_trigger = yes }
	}

	immediate = {
		save_event_target_as = target_victim
		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40007 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA160"
		add_trait = wounded
		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}

character_event = {
	id = 40007
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_FROM = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40007"
		piety = -50
	}
}

# on_failed_assassination - maimed
character_event = {
	id = 161
	desc = "EVTDESC161"
	picture = "GFX_evt_shadow"

	is_triggered_only = yes

	trigger = {
		NOT = { trait = maimed }
		NOT = { trait = one_eyed }
	}

	weight_multiplier = {
		days = 1
		modifier = {
			factor = 3
			trait = wounded
		}
	}

	immediate = {
		save_event_target_as = target_victim
		FROM = {
			character_event = { id = 11 }
			character_event = { id = 40008 }
		}
		clear_event_target = target_victim
	}

	option = {
		name = "EVTOPTA161"
		if = {
			limit = {
				NOT = { has_dlc = "Reapers" }
			}
			add_trait = maimed
			character_event = { id = 38281 }
		}
		if = {
			limit = {
				has_dlc = "Reapers"
			}
			add_trait = one_eyed
			add_trait = severely_injured
			hidden_tooltip = {
				character_event = { id = RIP.11501 } #Notify one-eyed
				resolve_severely_injured_effect = yes
			}
		}
		if = {
			limit = {
				host = { NOT = { character = FROM } }
				job_spymaster = {
					NOT = { character = FROM }
				}
			}
			hidden_tooltip = { host = { character_event = { id = 40020 days = 5 }  } }
		}
	}
}
character_event = {
	id = 40008
	desc = EVTDESC40006
	picture = GFX_evt_shadow

	hide_FROM = yes
	is_triggered_only = yes

	option = {
		name = "EVTOPTA40008"
		piety = -50
	}
}

# on_assassination
character_event = {
	id = 162
	picture = GFX_evt_shadow
	desc = EVTDESC162

	hide_FROM = yes
	is_triggered_only = yes

	option = {
		name = "EVTOPTA162"
		hidden_tooltip = {
			FROM = { character_event = { id = 40009 } }
		}
		death = {
			death_reason = death_murder_unknown
			killer = FROM
		}
	}
}

character_event = {
	id = 40009
	desc = "EVTDESC40009"
	picture = "GFX_evt_shadow"

	hide_FROM = yes
	is_triggered_only = yes

	option = {
		name = "EVTOPTA40009"
	}
}

# on_assassination_disc - discovered
character_event = {
	id = 163
	desc = "EVTDESC163"
	picture = "GFX_evt_shadow"

	is_triggered_only = yes

	immediate = {
		save_event_target_as = target_victim
		FROM = {
			character_event = { id = 10 }
		}
		clear_event_target = target_victim

		if = {
			limit = {
				employer = {
					NOT = { character = FROM }
					NOT = { character = ROOT }
					job_spymaster = {
						NOT = { character = FROM }
					}
				}
			}
			FROM = { set_character_flag = we_are_evil_assasinator }
			employer = { character_event = { id = 40020 days = 5 } }
		}
		FROM = { character_event = { id = 40010 } }
	}

	option = {
		name = "EVTOPTA163"
		death = {
			death_reason = death_murder
			killer = FROM
		}
	}
}

character_event = {
	id = 40010
	desc = "EVTDESC40010"
	picture = "GFX_evt_shadow"

	hide_FROM = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				same_realm = FROM
			}
			any_realm_character = {
				limit = {
					NOT = { character = FROM }
				}
				opinion = {
					who = ROOT
					modifier = opinion_dishonorable
					months = 60
				}
			}
		}
		religion_head = {
			opinion = {
				who = ROOT
				modifier = opinion_dishonorable
				months = 60
			}
		}
	}

	option = {
		name = "EVTOPTA40010"
		piety = -50
	}
}

# Failed assassination attempt on us, reactions possible
character_event = {
	id = 40020
	desc = EVTDESC40020
	picture = GFX_evt_shadow

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40020" #Inside same realm, go to top liege.
		trigger = {
			same_realm = FROMFROM
			independent = no
			NOT = { top_liege = { character = FROMFROM } }
		}
		ai_chance = {
			factor = 1000
		}
		top_liege = {
			character_event = {
				id = 40021
				tooltip = "EVTTOOLTIP40021"	#ask liege for help.
			}
		}
	}

	option = {
		name = "EVTOPTF40020" #Inside same realm, but its my top liege!
		trigger = {
			same_realm = FROMFROM
			independent = no
			top_liege = { character = FROMFROM }
		}
		ai_chance = {
			factor = 1000
		}
		top_liege = {
			character_event = {
				id = 40026
				days = 2
				tooltip = "EVTTOOLTIP40026"	#will be exposed.
			}
		}
	}

	option = {
		name = "EVTOPTB40020" #Are we his liege?
		trigger = {
			same_realm = FROMFROM
			independent = yes
			FROM = { FROM = { prisoner = no } }
		}
		ai_chance = {
			factor = 1000
		}
		if = {
		 	limit = { realm_intrigue = 16 }
			random = {
				chance = 70
				reverse_imprison = FROMFROM
			}
		}
		if = {
		 	limit = {
		 		realm_intrigue = 9
		 		NOT = { realm_intrigue = 16 }
		 	}
			random = {
				chance = 50
				reverse_imprison = FROMFROM
			}
		}
		if = {
		 	limit = {
		 		NOT = { realm_intrigue = 9 }
		 	}
			random = {
				chance = 30
				reverse_imprison = FROMFROM
			}
		}
	}
	option = {
		name = "EVTOPTC40020" #slay him, he is someone elses prisoner
		trigger = {
			same_realm = FROMFROM
			independent = yes
			FROMFROM = {
		 		prisoner = yes
				NOT = { host = { character = ROOT } }
				NOT = { has_opinion_modifier = { who = ROOT  modifier = i_attempted_murder } }
			}
		}
		ai_chance = {
			factor = 1000
		}
		FROM = { FROM = { opinion = { who = ROOT modifier = i_attempted_murder months = 2 } } }

		send_assassin = FROMFROM
	}
	option = {
		name = "EVTOPTE40020"	#slay him, he is prisoner
		trigger = {
			same_realm = FROMFROM
			independent = yes
			FROMFROM = {
		 		prisoner = yes
				host = { character = ROOT }
			}
		}
		ai_chance = {
			factor = 1000
		}
		FROMFROM = {
			death = {
				death_reason = death_execution
				killer = ROOT
			}
		}
	}
	option = {
		trigger = {
			NOT = {	same_realm = FROMFROM }
			FROMFROM = {
				NOT = { has_opinion_modifier = { who = ROOT  modifier = i_attempted_murder } }
			}
		}
		name = "EVTOPTC40020"		# Someone in another realm.
		ai_chance = {
			factor = 1000
		}

		FROMFROM = { opinion = { who = ROOT modifier = i_attempted_murder months = 2 } }

		send_assassin = FROMFROM
	}
	option = {
		name = "EVTOPTD40020"		#we dont dare do anything..  (player option, incase of worry.)
		ai_chance = {
			factor = 1
		}
		piety = 5
	}
}


# Liege deals with inter-realm assassinations..
character_event = {
	id = 40021
	desc = "EVTDESC40021"
	picture = GFX_evt_shadow

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40021"	 # give claim
		ai_chance = {
			factor = 2
			modifier = {
				factor = 50
				opinion = { who = FROM value = 50 }
			}
		}
		hidden_tooltip = { FROM = { character_event = { id = 40023 days = 1 } } }
		random_realm_character = {
			limit = { has_character_flag = we_are_evil_assasinator }
			primary_title = { add_claim = FROM }
			hidden_tooltip = { character_event = { id = 40022 days = 1 } }
			clr_character_flag = we_are_evil_assasinator
			opinion = {
				modifier = opinion_betrayed
				who = ROOT
				years = 2
			}
		}
	}
	option = {
		name = "EVTOPTB40021"	 # attempt to imprison
		trigger = {
			any_realm_character = {
				has_character_flag= we_are_evil_assasinator
				prisoner = no
			}
		}
		ai_chance = {
			factor = 5
			modifier = {
				factor = 100
				trait = just
			}
		}
		any_realm_character = {
			limit = { has_character_flag = we_are_evil_assasinator  }
			opinion = {
				modifier = opinion_betrayed
				who = FROM
				years = 2
			}
			reverse_opinion = {
				who = ROOT
				modifier = evil_murderer
				years = 5
			}
		}
		hidden_tooltip = { FROM = { character_event = { id = 40024 days = 1 random = 2 } } }
		if = {
		 	limit = { realm_intrigue = 16 }
			random_list = {
				70 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						imprison = yes
						clr_character_flag = we_are_evil_assasinator
					}
				}
				30 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						clr_character_flag = we_are_evil_assasinator
					}
				}
			}
		}
		if = {
		 	limit = {
		 		realm_intrigue = 9
		 		NOT = { realm_intrigue = 16 }
		 	}
			random_list = {
				50 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						imprison = yes
						clr_character_flag = we_are_evil_assasinator
					}
				}
				50 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						clr_character_flag = we_are_evil_assasinator
					}
				}
			}
		}
		if = {
		 	limit = {
		 		NOT = { realm_intrigue = 9 }
		 	}
			random_list = {
				30 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						imprison = yes
						clr_character_flag = we_are_evil_assasinator
					}
				}
				70 = {
					random_realm_character = {
						limit = {
							has_character_flag = we_are_evil_assasinator
							prisoner = no
						}
						clr_character_flag = we_are_evil_assasinator
					}
				}
			}
		}
	}
	option = {
		name = "EVTOPTD40021"	 # do nothing
		ai_chance = {
			factor = 1
			modifier = {
				factor = 100
				trait = arbitrary
			}
		}
		reverse_opinion = {
			who = FROM
			modifier = not_supportive_liege
			years = 2
		}
		hidden_tooltip = { FROM = { character_event = { id = 40025 days = 3 random = 5  } } }
		piety = -10
		random_realm_character = {
			limit = { has_character_flag = we_are_evil_assasinator  }
			clr_character_flag = we_are_evil_assasinator
		}
	}
}

#Legitimate claim on throne
character_event = {
	id = 40022
	desc = "EVTDESC40022"
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40022"	 # ok
		prestige = -10
		reverse_opinion = {
			who = FROM
			modifier = evil_murderer
			years = 5
		}
	}
}

character_event = {
	id = 40023
	desc = "EVTDESC40023"
	picture = GFX_evt_emissary

	is_triggered_only = yes


	option = {
		name = "EVTOPTA40023"	 # ok
		prestige = 5
	}
}

character_event = {
	id = 40024
	desc = "EVTDESC40024"
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40024"	 # ok
		prestige = 5
	}
}

character_event = {
	id = 40025
	desc = "EVTDESC40025"
	picture = GFX_evt_emissary

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40025"	 # ok
		prestige = -5
	}
}

character_event = {
	id = 40026
	desc = "EVTDESC40026"
	picture = GFX_evt_scandal

	is_triggered_only = yes

	option = {
		name = "EVTOPTA40026"
		if = {
			limit = { trait = kind }
			remove_trait = kind
		}
		if = {
			limit = { trait = just }
			remove_trait = just
		}
		if = {
			limit = { trait = honest }
			remove_trait = honest
		}
		prestige = -100
		any_vassal = {
			opinion = {
				who = ROOT
				modifier = black_honor
				years = 5
			}
		}
	}
}

# # CHRISTIAN CRUSADE AGAINST MUSLIMS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 200
	# title = "EVTNAME200"
	# desc = "EVTDESC200"
	# picture = GFX_evt_crusaders
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = christian }
		# new_character = {
			# religion_group = muslim
		# }
	# }

	# option = {
		# name = "EVTOPTA200" # Deus Vult!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # CHRISTIAN CRUSADE AGAINST PAGANS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 201
	# title = "EVTNAME200"
	# desc = "EVTDESC201"
	# picture = GFX_evt_crusaders
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = christian }
		# new_character = {
			# NOT = { religion_group = muslim }
			# NOT = { religion_group = christian }
		# }
	# }

	# option = {
		# name = "EVTOPTA200" # Deus Vult!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # CHRISTIAN CRUSADE AGAINST HERETICS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 321
	# title = EVTNAME200
	# desc = EVTDESC321
	# picture = GFX_evt_crusaders
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = christian }
		# new_character = {
			# religion_group = christian
		# }
	# }

	# option = {
		# name = "EVTOPTA200" # Deus Vult!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # MUSLIM JIHAD AGAINST CHRISTIANS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 320
	# title = "EVTNAME200"
	# desc = "EVTDESC320"
	# picture = GFX_evt_battle
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = muslim }
		# new_character = {
			# religion_group = christian
		# }
	# }

	# option = {
		# name = "EVTOPTA320" # Allahu Akhbar!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # MUSLIM JIHAD AGAINST PAGANS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 322
	# title = "EVTNAME200"
	# desc = "EVTDESC322"
	# picture = GFX_evt_battle
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = muslim }
		# new_character = {
			# NOT = { religion_group = muslim }
			# NOT = { religion_group = christian }
		# }
	# }

	# option = {
		# name = "EVTOPTA320" # Allahu Akhbar!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # MUSLIM JIHAD AGAINST HERETICS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 323
	# title = "EVTNAME200"
	# desc = "EVTDESC323"
	# picture = GFX_evt_battle
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = muslim }
		# new_character = {
			# religion_group = muslim
		# }
	# }

	# option = {
		# name = "EVTOPTA320" # Allahu Akhbar!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # PAGAN HOLY WAR AGAINST CHRISTIANS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 324
	# title = "EVTNAME200"
	# desc = "EVTDESC324"
	# picture = GFX_evt_viking_battle_oldgods
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = pagan_group }
		# new_character = {
			# religion_group = christian
		# }
	# }

	# option = {
		# name = "EVTOPTA324" # For [God Name]!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # PAGAN HOLY WAR AGAINST MUSLIMS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 325
	# title = "EVTNAME200"
	# desc = "EVTDESC325"
	# picture = GFX_evt_viking_battle_oldgods
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = pagan_group }
		# new_character = {
			# religion_group = muslim
		# }
	# }

	# option = {
		# name = "EVTOPTA324" # For [God Name]!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = "EVTOPTB200" # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTD200" # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = "EVTOPTE200" # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # PAGAN HOLY WAR AGAINST OTHER PAGANS
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 326
	# title = EVTNAME200
	# desc = EVTDESC326
	# picture = GFX_evt_viking_battle_oldgods
	# border = GFX_event_narrative_frame_war

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion = norscan_gods }
		# new_character = {
			# NOT = { religion_group = muslim }
			# NOT = { religion_group = christian }
		# }
	# }

	# option = {
		# name = EVTOPTA324 # For [God Name]!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = EVTOPTB200 # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = EVTOPTD200 # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = EVTOPTE200 # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # ZOROASTRIAN GREAT HOLY WAR
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 327
	# title = EVTNAME200
	# picture = GFX_evt_battle
	# border = GFX_event_narrative_frame_war

	# desc = {
		# text = EVTDESC327
		# trigger = {
			# new_character = {
				# NOT = { religion_group = christian }
				# NOT = { religion_group = muslim }
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC327_MUSLIMS
		# trigger = {
			# new_character = {
				# religion_group = muslim
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC327_CHRIST
		# trigger = {
			# new_character = {
				# religion_group = christian
			# }
		# }
	# }

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion= kitabid }
	# }

	# option = {
		# name = EVTOPTA324 # For [God Name]!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = EVTOPTB200 # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = EVTOPTD200 # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = EVTOPTE200 # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# # JEWISH GREAT HOLY WAR
# # Called from 'on_crusade_creation'
# # new_character is the targetted enemy
# # ROOT is the religious head
# # FROM is the attacked kingdom title
# narrative_event = {
	# id = 328
	# title = EVTNAME200
	# picture = GFX_evt_battle
	# border = GFX_event_narrative_frame_war

	# desc = {
		# text = EVTDESC328
		# trigger = {
			# new_character = {
				# NOT = { religion_group = christian }
				# NOT = { religion_group = muslim }
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC328_MUSLIMS
		# trigger = {
			# new_character = {
				# religion_group = muslim
			# }
		# }
	# }
	# desc = {
		# text = EVTDESC328_CHRIST
		# trigger = {
			# new_character = {
				# religion_group = christian
			# }
		# }
	# }

	# is_triggered_only = yes
	# major = yes
	# show_ROOT = yes
	# hide_new = yes

	# trigger = {
		# can_call_crusade = yes
		# ROOT = { religion_group = jewish_group }
	# }

	# option = {
		# name = EVTOPTA328 # God and Israel!
		# trigger = { religion = ROOT }
	# }
	# option = {
		# name = EVTOPTB200 # No concern of ours
		# trigger = {
			# NOT = { religion = ROOT }
			# new_character = {
				# NOT = { religion = PREV }
				# NOT = { character = PREV }
			# }
		# }
	# }
	# option = {
		# name = EVTOPTD200 # To Arms!
		# trigger = {
			# new_character = {
				# character = PREV
			# }
		# }
	# }
	# option = {
		# name = EVTOPTE200 # Terrible News!
		# trigger = {
			# new_character = {
				# religion = PREV
				# NOT = { character = PREV }
			# }
		# }
	# }
# }

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 202
	desc = "EVTDESC202"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# DEMAND_RELIGIOUS_CONVERSION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 203
	desc = "EVTDESC203"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# REVOKE_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 204
	desc = "EVTDESC204"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# REVOKE_TITLE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 205
	desc = "EVTDESC205"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 206
	desc = "EVTDESC206"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 207
	desc = "EVTDESC207"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SEND_GIFT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 208
	desc = "EVTDESC208"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SEND_GIFT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 209
	desc = "EVTDESC209"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# OFFER_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 210
	desc = "EVTDESC210"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}
	option = {
		name = "OK"
	}
}

# OFFER_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 211
	desc = "EVTDESC211"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ARRANGE_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 212
	desc = "EVTDESC212"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	# trigger = { ai = no }

	option = {
		name = "OK"
	}
}

# ARRANGE_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 213
	desc = "EVTDESC213"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}
	option = {
		name = "OK"
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 214
	desc = "EVTDESC214"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	#trigger = { ai = no }

	option = { name = "OK" #Married
		trigger = {
			NOR = {
				trait = creature_snotling
				FROM = { trait = creature_snotling }
				trait = creature_goblin
				FROM = { trait = creature_goblin }
				trait = creature_hobgoblin
				FROM = { trait = creature_hobgoblin }
				trait = creature_orc
				FROM = { trait = creature_orc }
				trait = creature_hobgoblin
				FROM = { trait = creature_hobgoblin }
			}
			OR = {
				AND = {
					OR = {
						AND = {
							trait = creature_human
							has_global_flag = mists_of_albion
							NOT = { location = { region = world_albion } }
						}
						AND = {
							trait = creature_human
							NOT = { has_global_flag = mists_of_albion }
						}
						trait = creature_amazon
						NOT = { religion = hashut }
						AND = { trait = creature_beastman
						religion_group = chaos_gods_group }
					}
					 FROM = {
						OR = {
							AND = {
							trait = creature_human
							has_global_flag = mists_of_albion
							NOT = { location = { region = world_albion } }
							}
							AND = {
								trait = creature_human
								NOT = { has_global_flag = mists_of_albion }
							}
							trait = creature_amazon
							AND = {
								trait = creature_beastman
								NOT = { religion = hashut }
								religion_group = chaos_gods_group
							}
						}
					}
				}
				 AND = {
					trait = creature_elf
					FROM = { trait = creature_elf }
				}
				AND = {
					trait = creature_halfling
					FROM = { trait = creature_halfling }
				}
				AND = {
					OR = {
						trait = creature_dwarf
						trait = creature_chaos_dwarf
					}
					FROM = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
				}
				AND = {
					trait = khemri_tomb_king
					FROM = { trait = khemri_tomb_king }
				}
				AND = {
					trait = khemri_liche_priest
					FROM = { trait = khemri_liche_priest }
				}
				AND = {
					trait = creature_ogre
					FROM = { trait = creature_ogre }
				}
				AND = {
					ROOT = {
						trait = creature_human
						has_global_flag = mists_of_albion
						location = { region = world_albion }
					}
					FROM = {
						trait = creature_human
						has_global_flag = mists_of_albion
						location = { region = world_albion }
					}
				}
				# AND = { trait = creature_skaven
				#	 FROM = { trait = creature_skaven } }
			}
		}
		hidden_tooltip = { letter_event = { id = intermarriage.001 }
					ROOT = { set_character_flag = about_to_marry
						character_event = { id = sdivorce.1001 days = 1 } } }
	}
	option = { name = "OK" #Not married
		trigger = {
			OR = {
				trait = creature_snotling
				FROM = { trait = creature_snotling }
				trait = creature_goblin
				FROM = { trait = creature_goblin }
				trait = creature_hobgoblin
				FROM = { trait = creature_hobgoblin }
				trait = creature_orc
				FROM = { trait = creature_orc }
				trait = creature_hobgoblin
				FROM = { trait = creature_hobgoblin }
			}
			NOR = {
				AND = {
					OR = {
						AND = {
							trait = creature_human
							has_global_flag = mists_of_albion
							NOT = { location = { region = world_albion } }
						}
						AND = {
							trait = creature_human
							NOT = { has_global_flag = mists_of_albion }
						}
						trait = creature_amazon
						AND = {
							trait = creature_beastman
							NOT = { religion = hashut }
							religion_group = chaos_gods_group
						}
					}
					FROM = {
						OR = {
							AND = {
							trait = creature_human
							has_global_flag = mists_of_albion
							NOT = { location = { region = world_albion } }
							}
							AND = {
								trait = creature_human
								NOT = { has_global_flag = mists_of_albion }
							}
							trait = creature_amazon
							AND = {
								trait = creature_beastman
								NOT = { religion = hashut }
								religion_group = chaos_gods_group
							}
						}
					}
				}
				AND = {
					trait = creature_elf
					FROM = { trait = creature_elf }
				}
				AND = {
					trait = creature_halfling
					FROM = { trait = creature_halfling }
				}
				AND = {
					OR = {
						trait = creature_dwarf
						trait = creature_chaos_dwarf
					}
					FROM = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
				}
				AND = {
					trait = khemri_tomb_king
					FROM = { trait = khemri_tomb_king }
				}
				AND = {
					trait = khemri_liche_priest
					FROM = { trait = khemri_liche_priest }
				}
				AND = {
					trait = creature_ogre
					FROM = { trait = creature_ogre }
				}
				AND = {
					ROOT = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
					FROM = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
				}
				 #AND = { trait = creature_skaven
				#	 FROM = { trait = creature_skaven } }
			}

		}
		hidden_tooltip = { letter_event = { id = intermarriage.002 }
				FROM = { ROOT = { spouse = { remove_spouse = ROOT
						move_character = PREVPREV } } }
				}
	}
}

# OFFER_SUCCESSION_MARRIGE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 215
	desc = "EVTDESC215"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

#NEW_Character = spouse you asked for
#FROM is the character asked for (if you are asking, it's the AI which is sending back the answer)
#ROOT is spouse in your court (or yourself)
# OFFER_MARRIGE_INTERACTION_ACCEPT_EVENT
diploresponse_event = {
	id = 216
	desc = "EVTDESC216"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	# trigger = { ai = no }

	immediate = {
		opinion = { who = FROM modifier = opinion_recent_marriage months = 1 }
		reverse_opinion = { who = FROM modifier = opinion_recent_marriage months = 1 }
	}

	option = {
		name = "OK" #Married
		trigger = {
			OR = {
				AND = {
					ROOT = {
						OR = {
							AND = {
								trait = creature_human
								has_global_flag = mists_of_albion
								NOT = { location = { region = world_albion } }
							}
							AND = {
								trait = creature_human
								NOT = { has_global_flag = mists_of_albion }
							}
							trait = creature_amazon
							AND = {
								trait = creature_beastman
								NOT = { religion = hashut }
								religion_group = chaos_gods_group
							}
						}
					}
					new_character = {
							OR = {
								AND = {
									trait = creature_human
									has_global_flag = mists_of_albion
									NOT = { location = { region = world_albion } }
								}
								AND = {
									trait = creature_human
									NOT = { has_global_flag = mists_of_albion }
								}
								trait = creature_amazon
								AND = {
									trait = creature_beastman
									NOT = { religion = hashut }
									religion_group = chaos_gods_group
								}
							}
					}
				}
				AND = {
					ROOT = { trait = creature_elf }
					new_character = { trait = creature_elf }
				}
				AND = {
					ROOT = { trait = creature_halfling }
					new_character = { trait = creature_halfling }
				}
				AND = {
					ROOT = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
					 new_character = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
				}
				AND = {
					ROOT = { trait = khemri_tomb_king }
					new_character = { trait = khemri_tomb_king }
				}
				AND = {
					ROOT = { trait = khemri_liche_priest }
					new_character = { trait = khemri_liche_priest }
				}
				AND = {
					ROOT = { trait = creature_ogre }
					 new_character = { trait = creature_ogre }
				}
				AND = {
					ROOT = { trait = creature_skaven }
					new_character = { trait = creature_skaven }
				}
				AND = {
					ROOT = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
					new_character = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
				}
			}
		}
		hidden_tooltip = { letter_event = { id = intermarriage.001 }
					ROOT = { set_character_flag = about_to_marry } }
	}
	option = { name = "OK" #Not married
		trigger = {
			NOR = {
				AND = {
					ROOT = {
						OR = {
							AND = {
								trait = creature_human
								has_global_flag = mists_of_albion
								NOT = { location = { region = world_albion } }
							}
							AND = {
								trait = creature_human
								NOT = { has_global_flag = mists_of_albion }
							}
							trait = creature_amazon
							AND = {
								trait = creature_beastman
								NOT = { religion = hashut }
								religion_group = chaos_gods_group
							}
						}
					}
					new_character = {
						OR = {
							AND = {
								trait = creature_human
								has_global_flag = mists_of_albion
								NOT = { location = { region = world_albion } }
							}
							AND = {
								trait = creature_human
								NOT = { has_global_flag = mists_of_albion }
							}
							trait = creature_amazon
								AND = {
									trait = creature_beastman
									NOT = { religion = hashut }
									religion_group = chaos_gods_group
								}
						}
					}
				}
				AND = {
					ROOT = { trait = creature_elf }
					new_character = { trait = creature_elf }
				}
				AND = {
					ROOT = { trait = creature_halfling }
					new_character = { trait = creature_halfling }
				}
				AND = {
					ROOT = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
					new_character = {
						OR = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
				}
				AND = {
					ROOT = { trait = khemri_tomb_king }
					new_character = { trait = khemri_tomb_king }
				}
				AND = {
					ROOT = { trait = khemri_liche_priest }
					new_character = { trait = khemri_liche_priest }
				}
				AND = {
					ROOT = { trait = creature_ogre }
					new_character = { trait = creature_ogre }
				}
				AND = {
					ROOT = { trait = creature_skaven }
					new_character = { trait = creature_skaven }
				}
				AND = {
					ROOT = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
					new_character = {
						has_global_flag = mists_of_albion
						trait = creature_human
						location = { region = world_albion }
					}
				}
			}
		}
		hidden_tooltip = { letter_event = { id = intermarriage.002 }
				FROM = { ROOT = { spouse = { remove_spouse = ROOT
						move_character = PREVPREV } } }
				}
	}
}

# OFFER_MARRIGE_INTERACTION_DECLINE_EVENT
diploresponse_event = {
	id = 217
	desc = "EVTDESC217"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 218
	desc = "EVTDESC218"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 219
	desc = "EVTDESC219"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# EDUCATE_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 220
	desc = "EVTDESC220"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# EDUCATE_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 221
	desc = "EVTDESC221"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABANDON_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 222
	desc = "EVTDESC222"

	major = no
	is_friendly = yes
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABANDON_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 223
	desc = "EVTDESC223"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# STOP_BACKING_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 224

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC224"

	option = {
		name = "OK"
	}
}

# STOP_BACKING_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 225

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC225"

	option = {
		name = "OK"
	}
}

# JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 226

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC226"

	option = {
		name = "OK"
	}
}

# JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 227

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC227"

	option = {
		name = "OK"
	}
}

# GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 228

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		#ai = no
	}
	immediate = {
	if = { limit = { OR = {
				is_daemon_race_trigger = yes
				trait = creature_forestspirit
				trait = creature_toad
				trait = creature_pig
				trait = khemri_soldier } }
		abdicate = yes
		character_event = { id = schaos.102 days = 1 } }
	}

	desc = "EVTDESC228"

	option = {
		name = "OK"
	}
}

# GRANT_LANDED_TITLE_INTERACTION_DECLINE_EVENT =
#diploresponse_event = {
#	id = 229
#
#	is_triggered_only = yes
#	major = no
#
#	trigger = {
#		ai = no
#	}
#
#	desc = "EVTDESC229"
#
#	option = {
#		name = "OK"
#	}
#}

# APPOINT_TO_OFFICE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 230

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC230"

	option = {
		name = "OK"
	}
}

# APPOINT_TO_OFFICE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 231

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC231"

	option = {
		name = "OK"
	}
}

# ASK_FOR_INVASION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 232

	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC232"

	option = {
		name = "OK"
	}
}

# ASK_FOR_INVASION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 233

	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC233"

	option = {
		name = "OK"
	}
}

# ASK_FOR_DIVORCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 234

	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC234"

	option = {
		name = "OK"
	}
}

# ASK_FOR_DIVORCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 235

	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC235"

	option = {
		name = "OK"
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 236

	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = {
		text = EVTDESC236
		trigger = {
			religion_group = old_world_group
		}
	}
	desc = {
		text = EVTDESC236_NC
		trigger = {
			NOT = { religion_group = old_world_group }
		}
	}

	option = {
		name = "OK"
	}
}

# ASK_FOR_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 237

	border = GFX_event_letter_frame_religion

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC237"

	option = {
		name = "OK"
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 238

	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	is_friendly = yes
	ai = no

	trigger = {
		NOT = { is_liege_of = FROM }
	}

	desc = EVTDESC238

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_ACCEPT_EVENT for tribal vassals
diploresponse_event = {
	id = 41000

	border = GFX_event_letter_frame_war

	notification = yes

	is_triggered_only = yes
	is_friendly = yes
	ai = no
	trigger = {
		is_liege_of = FROM
	}

	desc = EVTDESC238

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT
diploresponse_event = {
	id = 239

	border = GFX_event_letter_frame_war

	is_triggered_only = yes

	trigger = {
		ai = no
		NOT = { is_liege_of = FROM }
	}

	desc = EVTDESC239

	option = {
		name = OK
	}
}

# CALL_ALLY_INTERACTION_DECLINE_EVENT for tribal vassals
diploresponse_event = {
	id = 41001

	border = GFX_event_letter_frame_war

	notification = yes

	is_triggered_only = yes

	trigger = {
		ai = no
		is_liege_of = FROM
	}

	desc = EVTDESC239

	option = {
		name = OK
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 240

	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
		OR = {
			FROM = { independent = yes }
			NOT = {
				liege = {
					OR = {
						character = ROOT
						character = FROM
					}
				}
			}
		}
	}

	desc = "EVTDESC240"

	option = {
		name = "OK"
	}
}

# DECLARE_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 241

	border = GFX_event_letter_frame_war

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
		FROM = { independent = no }
		liege = {
			OR = {
				character = ROOT
				character = FROM
			}
		}
	}

	desc = "EVTDESC241"

	option = {
		name = "OK"
	}
}

# RETRACT_VASSAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 274
	desc = "EVTDESC274"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# RETRACT_VASSAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 275
	desc = "EVTDESC275"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}


# ARRANGE_SUCC_BETROTHAL_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 330
	desc = "EVTDESC330"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	#trigger = { ai = no }

	option = {
		name = "OK"
	}
}

# ARRANGE_SUCC_BETROTHAL_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 331
	desc = "EVTDESC331"

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}
	option = {
		name = "OK"
	}
}

# INVITE_TO_COURT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 280

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC280"

	option = {
		name = "OK"
	}
}

# INVITE_TO_COURT_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 281

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC281"

	option = {
		name = "OK"
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 282

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC282"

	option = {
		name = "OK"
	}
}

# ASK_FOR_VASSALIZATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 283

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC283"

	option = {
		name = "OK"
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 284

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC284"

	option = {
		name = "OK"
	}
}

# ASK_TO_LIFT_EXCOMMUNICATION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 285

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC285"

	option = {
		name = "OK"
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 286

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC286"

	option = {
		name = "OK"
	}
}

# ASK_TO_RANSOM_CHARACTER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 287

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC287"

	option = {
		name = "OK"
	}
}

# SETTLE_ADVENTURER_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 288

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC288"

	option = {
		name = "OK"
	}
}

# SETTLE_ADVENTURER_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 289

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC289"

	option = {
		name = "OK"
	}
}

# ABSORB_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 503
	desc = "EVTDESC503"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ABSORB_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 504
	desc = "EVTDESC504"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORM_BLOOD_OATH_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 505
	desc = "EVTDESC505"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORM_BLOOD_OATH_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 506
	desc = "EVTDESC506"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SETTLE_FEUD_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 507
	desc = "EVTDESC507"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA507"
	}
}

# SETTLE_FEUD_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 508
	desc = "EVTDESC508"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA508"
	}
}

# SPLIT_CLAN_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 509
	desc = "EVTDESC509"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# SPLIT_CLAN_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 510
	desc = "EVTDESC510"

	is_triggered_only = yes
	major = no
	is_hostile = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# On-action event: Royal Marriage Aid Duty
character_event = {
	id = 500
	desc = EVTDESC500
	picture = GFX_evt_marriage

	is_triggered_only = yes


	trigger = {
		NOR = {
			has_character_flag = recieved_royal_marriage_aid_duty
			has_character_flag = no_wedding_event
		}
		FROM = {
			NOT = { has_character_flag = no_wedding_event }
			is_married = yes
			}
		OR = {
			AND = {
				NOT = { religion = ormazd }
				NOT = { religion = kitabid }
			}
			NOT = { new_character = { is_close_relative = FROM } }
		}
		OR = {
			FROM = { character = ROOT }
			AND = {
				FROM = {
					dynasty = ROOT
					is_primary_heir = ROOT
				}
				new_character = {
					NOT = { character = ROOT }
				}
			}
		}
	}
	immediate = {
		set_character_flag = recieved_royal_marriage_aid_duty
	}
	option = {
		name = EVTOPTA500
		scaled_wealth = {
			value = 0.5
			min = 10
		}
	}
	option = {
		name = EVTOPTB500
		if = {
			limit = {
				NOT = { yearly_income = 50 }
			}
			if = {
				limit = { tier = EMPEROR }
				prestige = 150
			}
			if = {
				limit = { tier = KING }
				prestige = 50
			}
			if = {
				limit = { tier = DUKE }
				prestige = 25
			}
			if = {
				limit = { tier = COUNT }
				prestige = 13
			}
			if = {
				limit = { tier = BARON }
				prestige = 6
			}
			break = yes
		}

		if = {
			limit = { tier = EMPEROR }
			prestige = 300
		}
		if = {
			limit = { tier = KING }
			prestige = 200
		}
		if = {
			limit = { tier = DUKE }
			prestige = 100
		}
		if = {
			limit = { tier = COUNT }
			prestige = 50
		}
		if = {
			limit = { tier = BARON }
			prestige = 25
		}
	}
}

# On-action event: kitabid Xwedodah marriage
character_event = {
	id = 501
	desc = EVTDESC501
	picture = GFX_evt_marriage_zoroastrian_group

	religion = ormazd

	is_triggered_only = yes

	trigger = {
		new_character = { is_close_relative = FROM }
		OR = {
			FROM = { character = ROOT }
			AND = {
				FROM = {
					dynasty = ROOT
					is_primary_heir = ROOT
				}
				new_character = {
					NOT = { character = ROOT }
				}
			}
		}
	}

	option = {
		name = EVTOPTA500
		scaled_wealth = {
			value = 0.5
			min = 10
		}

		if = {
			limit = { tier = EMPEROR }
			piety = 300
		}
		if = {
			limit = { tier = KING }
			piety = 200
		}
		if = {
			limit = { tier = DUKE }
			piety = 100
		}
		if = {
			limit = { tier = COUNT }
			piety = 50
		}
		if = {
			limit = { tier = BARON }
			piety = 25
		}
	}
	option = {
		name = EVTOPTB500

		if = {
			limit = { tier = EMPEROR }
			piety = 300
		}
		if = {
			limit = { tier = KING }
			piety = 200
		}
		if = {
			limit = { tier = DUKE }
			piety = 100
		}
		if = {
			limit = { tier = COUNT }
			piety = 50
		}
		if = {
			limit = { tier = BARON }
			piety = 25
		}

		if = {
			limit = {
				NOT = { yearly_income = 50 }
			}
			if = {
				limit = { tier = EMPEROR }
				prestige = 150
			}
			if = {
				limit = { tier = KING }
				prestige = 50
			}
			if = {
				limit = { tier = DUKE }
				prestige = 25
			}
			if = {
				limit = { tier = COUNT }
				prestige = 13
			}
			if = {
				limit = { tier = BARON }
				prestige = 6
			}
			break = yes
		}

		if = {
			limit = { tier = EMPEROR }
			prestige = 300
		}
		if = {
			limit = { tier = KING }
			prestige = 200
		}
		if = {
			limit = { tier = DUKE }
			prestige = 100
		}
		if = {
			limit = { tier = COUNT }
			prestige = 50
		}
		if = {
			limit = { tier = BARON }
			prestige = 25
		}
	}
}

# On-action event: ormazd close kin marriage
character_event = {
	id = 502
	desc = EVTDESC502
	picture = GFX_evt_marriage

	religion = ormazd

	is_triggered_only = yes

	trigger = {
		new_character = { is_close_relative = FROM }
		OR = {
			FROM = { character = ROOT }
			AND = {
				FROM = {
					dynasty = ROOT
					is_primary_heir = ROOT
				}
				new_character = {
					NOT = { character = ROOT }
				}
			}
		}
	}

	option = {
		name = EVTOPTA500
		scaled_wealth = {
			value = 0.5
			min = 10
		}
		if = {
			limit = { tier = EMPEROR }
			piety = 300
		}
		if = {
			limit = { tier = KING }
			piety = 200
		}
		if = {
			limit = { tier = DUKE }
			piety = 100
		}
		if = {
			limit = { tier = COUNT }
			piety = 50
		}
		if = {
			limit = { tier = BARON }
			piety = 25
		}
	}
	option = {
		name = EVTOPTB500

		if = {
			limit = { tier = EMPEROR }
			piety = 300
		}
		if = {
			limit = { tier = KING }
			piety = 200
		}
		if = {
			limit = { tier = DUKE }
			piety = 100
		}
		if = {
			limit = { tier = COUNT }
			piety = 50
		}
		if = {
			limit = { tier = BARON }
			piety = 25
		}

		if = {
			limit = {
				NOT = { yearly_income = 50 }
			}
			if = {
				limit = { tier = EMPEROR }
				prestige = 150
			}
			if = {
				limit = { tier = KING }
				prestige = 50
			}
			if = {
				limit = { tier = DUKE }
				prestige = 25
			}
			if = {
				limit = { tier = COUNT }
				prestige = 13
			}
			if = {
				limit = { tier = BARON }
				prestige = 6
			}
			break = yes
		}

		if = {
			limit = { tier = EMPEROR }
			prestige = 300
		}
		if = {
			limit = { tier = KING }
			prestige = 200
		}
		if = {
			limit = { tier = DUKE }
			prestige = 100
		}
		if = {
			limit = { tier = COUNT }
			prestige = 50
		}
		if = {
			limit = { tier = BARON }
			prestige = 25
		}
	}
}


# Approve or disapprove of de facto Law Change
letter_event = {
	id = 290
	desc = "EVTDESC290"

	lacks_dlc = "Conclave"

	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}


# Zeus Version Approve or disapprove of de facto Law Change
letter_event = {
	id = 675
	desc = "EVTDESC290"

	is_triggered_only = yes

	trigger = {
		has_dlc = "Zeus"
		ai = no
		is_voter = yes
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTC290"
		decline_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}

# Approve or disapprove of de jure Law Change
letter_event = {
	id = 291

	lacks_dlc = "Conclave"
	ai = no

	is_triggered_only = yes

	trigger = {
		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	desc = "EVTDESC291"
	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}

# Zeus Version Approve or disapprove of de jure Law Change
letter_event = {
	id = 676
	is_triggered_only = yes
	trigger = {
		has_dlc = "Zeus"
		ai = no
		is_voter = yes
		FROM = {
			holder_scope = {
				is_vassal_or_below = ROOT
			}
		}
	}

	desc = "EVTDESC291"
	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTC290"
		decline_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}

# Approve or disapprove of de jure Law Change
letter_event = {
	id = 292
	desc = "EVTDESC292"

	lacks_dlc = "Conclave"
	ai = no

	is_triggered_only = yes

	trigger = {
		FROM = {
			holder_scope = {
				NOT = { is_vassal_or_below = ROOT }
			}
		}
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}

# ASK_TO_JOIN_WAR_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 293

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC293"

	option = {
		name = "OK"
	}
}

# ASK_TO_JOIN_WAR_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 294

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC294"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 295

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC295"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 296

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC296"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 297

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC297"

	option = {
		name = "OK"
	}
}

# ASK_TO_EMBARGO_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 298

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC298"

	option = {
		name = "OK"
	}
}

# FORM_ALLIANCE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = diploresponse.1
	desc = "EVTDESCdiploresponse.1"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORM_ALLIANCE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = diploresponse.2
	desc = "EVTDESCdiploresponse.2"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}


# Rebels spawn
# NOTE THAT WITH "THE OLD GODS" DLC, THIS IS NO LONGER FIRED
province_event = {
	id = 600
	desc = "EVTDESC600"
	picture = GFX_evt_peasants
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	trigger = {
		NOT = {
			has_dlc = "The Old Gods"
		}
		num_of_settlements = 1
	}

	option = {
		name = "EVTOPTA600"
		hidden_tooltip = {
			random_list = {
				50 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}
					new_character = {
						spawn_unit = {
							province = PREV
							home = PREV
							scaled_by_biggest_garrison = 1.0
							troops = {
								archers = { 6 6 }
								light_cavalry = { 4 4 }
								light_infantry = { 10 10 }
							}
						}
					}
				}
				25 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}
					new_character = {
						spawn_unit = {
							province = PREV
							home = PREV
							scaled_by_biggest_garrison = 1.0
							troops = {
								archers = { 6 6 }
								light_cavalry = { 3 3 }
								light_infantry = { 11 11 }
							}
						}
					}
				}
				25 = {
					create_random_soldier = {
						random_traits = yes
						dynasty = random
						religion = ROOT
						culture = ROOT
						female = no
						age = 30
						employer = e_rebels
					}
					new_character = {
						spawn_unit = {
							province = PREV
							home = PREV
							scaled_by_biggest_garrison = 1.0
							troops = {
								archers = { 6 6 }
								light_infantry = { 14 14 }
							}
						}
					}
				}
			}
			# Lower revolt risk
			remove_province_modifier = recent_revolt
			add_province_modifier = {
				name = recent_revolt
				duration = 3650
			}
			# Inform barons about the rebels
			owner = {
				set_character_flag = informed_about_rebels
			}
			any_province_lord = {
				limit = {
					NOT = { has_character_flag = informed_about_rebels }
					ai = no
				}
				character_event = { id = 601 days = 7 }
			}
			owner = {
				clr_character_flag = informed_about_rebels
			}
		}
	}
}

# Inform barons about the rebels
character_event = {
	id = 601
	desc = "EVTDESC601"
	picture = "GFX_evt_peasants"

	is_triggered_only = yes

	option = {
		name = "EVTOPTA601"
	}
}

# Province defects to rebels
# Spawn for baron
# FROM = the province
character_event = {
	id = 610
	desc = "EVTDESC610"
	picture = "GFX_evt_peasants"

	is_triggered_only = yes

	option = {
		name = "EVTOPTA610"
		scaled_wealth = -0.2
	}
}

# Rebels disperse
# Spawn for baron
# FROM = the province
character_event = {
	id = 615
	desc = "EVTDESC615"
	picture = "GFX_evt_peasants"

	is_triggered_only = yes

	option = {
		name = "EXCELLENT"
	}
}

# Crusade/Jihad Succeeds
narrative_event = {

	# ROOT is the target title
	# new_character is the Enemy
	# FROM is the taker

	id = 620
	title = "EVTNAME620"
	desc = "EVTDESC620"
	picture = "GFX_evt_battle"
	border = "GFX_event_narrative_frame_religion"

	major = yes

	only_rulers = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA620"
		trigger = {
			religion_group = FROM
		}
	}

	option = {
		name = "EVTOPTB620"
		trigger = {
			NOT = {
				religion_group = FROM
			}
		}
	}
}

# Crusade/Jihad Fails
narrative_event = {

	# ROOT is the target title
	# new_character is the Enemy
	# FROM is the Pope/Caliph

	id = 621
	title = "EVTNAME621"
	desc = "EVTDESC621"
	picture = "GFX_evt_battle"
	border = "GFX_event_narrative_frame_religion"

	major = yes

	only_rulers = yes

	is_triggered_only = yes

	immediate = {
		any_playable_ruler = {
			clr_character_flag = forced_to_crusade
		}
	}

	option = {
		name = "EVTOPTA621"
		trigger = {
			FROM = {
				religion_group = PREV
			}
			is_heretic = no
		}
	}
	option = {
		name = "EVTOPTC621"
		trigger = {
			FROM = {
				religion_group = PREV
			}
			is_heretic = yes
		}
	}

	option = {
		name = "EVTOPTB621"
		trigger = {
			NOT = {
				FROM = {
					religion_group = PREV
				}
			}
		}
	}
}

# On-action event: On Death - hidden - clear stuff
character_event = {
	id = 650

	is_triggered_only = yes

	hide_window = yes

	immediate = {
		if = {
			limit = {
				diplomatic_immunity = yes
				leads_faction = yes
			}
			any_faction_backer = {
				limit = {
					diplomatic_immunity = yes
				}
				diplomatic_immunity = no
			}
		}
	}
}

# on_forced_consort
character_event = {
	id = 660
	desc = EVTDESC660
	picture = GFX_evt_scandal

	is_triggered_only = yes

	immediate = {
		hidden_tooltip = {
			spouse = {
				character_event = { id = 662 }
			}
			any_child = {
				character_event = { id = 661 }
			}
			any_sibling = {
				character_event = { id = 661 }
			}
			father = {
				character_event = { id = 661 }
			}
			mother = {
				character_event = { id = 661 }
			}
		}
	}

	option = {
		name = "EVTOPTA660"
       character_event = { id = rape.0004 }
        if = {
            limit = {
                FROM = {
                    OR = { religion = cult_of_pleasure
                    religion = atharti
                    religion = slaanesh
                    religion = amazon }
                }
            }
            add_lover = FROM
        }
		opinion = {
			who = FROM
			modifier = opinion_forced_consort
			months = 1200
		}
	}
}

character_event = {
	id = 661
	desc = "EVTDESC661"
	picture = GFX_evt_scandal

	is_triggered_only = yes

	option = {
		name = "EVTOPTA661"
		opinion = {
			who = FROMFROM
			modifier = opinion_forced_relative_consort
			months = 1200
		}
	}
}

character_event = {
	id = 662
	desc = {
		text = EVTDESC662_B
		trigger = {
			is_female = yes
		}
	}
	desc = {
		text = EVTDESC662
		trigger = {
			is_female = no
		}
	}
	picture = GFX_evt_scandal

	is_triggered_only = yes

	option = {
		name = "EVTOPTA662"
		opinion = {
			who = FROMFROM
			modifier = opinion_forced_wife_consort
			months = 1200
		}
		hidden_tooltip = {
			opinion = {
				who = FROM
				modifier = opinion_abducted_spouse
				months = 1200
			}
		}
	}
}

narrative_event = {
	id = 670
	title = "EVTNAME670"
	desc = "EVTDESC670"
	picture = GFX_evt_heretic
	border = "GFX_event_narrative_frame_religion"

	is_triggered_only = yes
	major = yes
	show_ROOT = yes
	hide_new = yes

	only_rulers = yes

	immediate = {
		if = {
			limit = { ai = no }
			set_character_flag = achievement_new_ways
		}
		any_courtier = {
			limit = {
				is_heresy_of = ROOT
				employer = { character = ROOT }
			}
			religion = ROOT
		}
		any_dynasty_member = {
			limit = {
				is_heresy_of = ROOT
				is_playable = no
			}
			religion = ROOT
		}
		any_vassal = {
			limit = {
				is_playable = no
				is_heresy_of = ROOT
			}
			religion = ROOT
		}
		capital_scope = {
			if = {
				limit = { is_heresy_of = ROOT }
				religion = ROOT
			}
		}
		# if = {
			# limit = { religion = norse_pagan_reformed }
			# d_jomsvikings = {
				# religion = norse_pagan_reformed # This Holy Order now changes religion
			# }
			# set_global_flag = norse_reformation
		# }
		# if = {
			# limit = { religion = tengri_pagan_reformed }
			# set_global_flag = tengri_reformation
		# }
		# if = {
			# limit = { religion = baltic_pagan_reformed }
			# set_global_flag = baltic_reformation
		# }
		# if = {
			# limit = { religion = finnish_pagan_reformed }
			# set_global_flag = finnish_reformation
		# }
		# if = {
			# limit = { religion = aztec_reformed }
			# set_global_flag = aztec_reformation
		# }
		# if = {
			# limit = { religion = slavic_pagan_reformed }
			# set_global_flag = slavic_reformation
		# }
		# if = {
			# limit = { religion = west_african_pagan_reformed }
			# set_global_flag = west_african_reformation
		# }
		# if = {
			# limit = { religion = zun_pagan_reformed }
			# set_global_flag = zun_reformation
		# }
	}

	option = {
		name = "EVTOPTA670" # The Reformer
		trigger = { religion = ROOT }
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_PLAYER_REFORMED_RELIGION
				portrait = [Root.GetID]
			}
		}
		hidden_tooltip = {
			if = {
				limit = {
					ROOT = { has_religion_feature = religion_matriarchal }
				}
				ROOT = {
					any_demesne_title = {
						add_law = {
							law = enatic_succession
							cooldown = no
							opinion_effect = no
						}
						add_law = {
							law = status_of_women_4
							cooldown = no
							opinion_effect = no
						}
					}
					recalc_succession = yes
				}
			}
			if = {
				limit = {
					ROOT = { has_religion_feature = religion_patriarchal }
				}
				ROOT = {
					any_demesne_title = {
						add_law = {
							law = agnatic_succession
							cooldown = no
							opinion_effect = no
						}
						add_law = {
							law = status_of_women_0
							cooldown = no
							opinion_effect = no
						}
					}
					recalc_succession = yes
				}
			}
			if = {
				limit = {
					ROOT = {
						OR = {
							has_religion_feature = religion_equal
							has_religion_feature = religion_feature_bon
						}
					}
				}
				ROOT = {
					any_demesne_title = {
						add_law = {
							law = true_cognatic_succession
							cooldown = no
							opinion_effect = no
						}
						add_law = {
							law = status_of_women_4
							cooldown = no
							opinion_effect = no
						}
					}
					recalc_succession = yes
				}
			}
			ROOT = {
				if = {
					limit = {
						has_religion_feature = religion_matriarchal
					}
					any_close_relative = {
					limit = { is_female = no }
						opinion = {
							who = ROOT
							modifier = bad_succ_law_change
							years = 100
						}
					}
					any_close_relative = {
						limit = { is_female = yes }
						opinion = {
							who = ROOT
							modifier = good_succ_law_change
							years = 100
						}
					}
				}
				if = {
					limit = {
						has_religion_feature = religion_patriarchal
					}
					any_close_relative = {
						limit = { is_female = yes }
						opinion = {
							who = ROOT
							modifier = bad_succ_law_change
							years = 100
						}
					}
					any_close_relative = {
						limit = { is_female = no }
						opinion = {
							who = ROOT
							modifier = good_succ_law_change
							years = 100
						}
					}
				}
			}
		}
	}
	option = {
		name = "EVTOPTB670" # Rulers of the old Faith - Accept
		trigger = {
			is_heresy_of = ROOT # The old religion has become a heresy of the Reformed one
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = { has_religion_feature = religion_no_leader }
				ai = yes
			}
			hidden_tooltip = {
				character_event = { id = HF.23016 days = 20 random = 20 }
			}
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = { has_religion_feature = religion_matriarchal }
			}
			custom_tooltip = { text = tooltip_HF23014_A }
			hidden_tooltip = {
				any_demesne_title = {
					add_law = {
						law = enatic_succession
						cooldown = no
						opinion_effect = no
					}
					add_law = {
						law = status_of_women_4
						cooldown = no
						opinion_effect = no
					}
				}
				recalc_succession = yes
			}
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = { has_religion_feature = religion_patriarchal }
			}
			custom_tooltip = { text = tooltip_HF23015_A }
			hidden_tooltip = {
				any_demesne_title = {
					add_law = {
						law = agnatic_succession
						cooldown = no
						opinion_effect = no
					}
					add_law = {
						law = status_of_women_0
						cooldown = no
						opinion_effect = no
					}
				}
				recalc_succession = yes
			}
		}
		if = {
			limit = { #Offer chance to switch the vassals' succession laws.
				ROOT = {
					OR = {
						has_religion_feature = religion_equal
						has_religion_feature = religion_feature_bon
					}
				}
			}
			custom_tooltip = { text = tooltip_HF23016_A }
			hidden_tooltip = {
				any_demesne_title = {
					add_law = {
						law = true_cognatic_succession
						cooldown = no
						opinion_effect = no
					}
					add_law = {
						law = status_of_women_4
						cooldown = no
						opinion_effect = no
					}
				}
				recalc_succession = yes
			}
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}
		ai_chance = {
			factor = 50
			modifier = {
				factor = 5
				any_liege = { religion = ROOT }
			}
			modifier = {
				factor = 2
				same_realm = ROOT
			}
			modifier = {
				factor = 5
				trait = cynical
			}
			modifier = {
				factor = 10
				dynasty = ROOT
			}
			modifier = {
				factor = 0.1
				trait = zealous
			}
			modifier = {
				factor = 0.5
				trait = content
			}
		}

		religion = ROOT

		hidden_tooltip = {
			any_courtier = {
				limit = {
					is_heresy_of = ROOT
					employer = { character = PREV }
				}
				religion = ROOT
			}
			any_dynasty_member = {
				limit = {
					is_heresy_of = ROOT
					is_playable = no
				}
				religion = ROOT
			}
			any_vassal = {
				limit = {
					is_playable = no
					is_heresy_of = ROOT
				}
				religion = ROOT
			}
			capital_scope = {
				if = {
					limit = { is_heresy_of = ROOT }
					religion = ROOT
				}
			}
		}
	}
	option = {
		name = "EVTOPTC670" # Rulers of the old Faith - Decline
		trigger = {
			is_heresy_of = ROOT # The old religion has become a heresy of the Reformed one
		}
		if = {
			limit = { ai = no }
			chronicle = {
				entry = CHRONICLE_OTHER_REFORMED_PLAYERS_RELIGION
				portrait = [Root.GetID]
			}
		}
		tooltip = { religion = THIS }
	}
	option = {
		name = "EVTOPTD670" # Other playable rulers
		trigger = {
			NOT = { religion = ROOT }
			NOT = { is_heresy_of = ROOT }
		}
	}
}


####################################################
# Elective Gavelkind Succession:
# Vassal Junior Heir Can Choose Independence
####################################################

character_event = {
	id = 63103
	desc = EVTDESC_63103
	picture = GFX_evt_throne_room

	capable_only = yes
	prisoner = no
	min_age = 16

	is_triggered_only = yes

	trigger = {
		has_dlc = "Charlemagne"
		top_liege = {
			in_revolt = no
		}
	}
	immediate = {
		sound_effect = pagan_reformation
	}

	option = {
		name = EVTOPTA_63103 # Remain a vassal
		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				opinion = {
					who = FROM
					value = 25
				}
			}
			modifier = {
				factor = 2
				opinion = {
					who = FROM
					value = 50
				}
			}
			modifier = {
				factor = 4
				trait = content
			}
		}
	}
	option = {
		name = EVTOPTB_63103 # Go independent

		ai_chance = {
			factor = 100
			modifier = {
				factor = 2
				NOT = {
					opinion = {
						who = FROM
						value = -25
					}
				}
			}
			modifier = {
				factor = 2
				NOT = {
					opinion = {
						who = FROM
						value = -50
					}
				}
			}
			modifier = {
				factor = 2
				trait = ambitious
			}
		}

		hidden_tooltip = {
			FROM = { character_event = { id = 63104 } }
		}

		if = {
			limit = {
				liege = {
					independent = no
				}
			}
			liege = {
				liege = {
					ROOT = {
						set_defacto_liege = PREV
						set_character_flag = set_to_higher_liege
					}
				}
			}
		}

		if = {
			limit = {
				liege = {
					independent = yes
				}
				NOT = { has_character_flag = set_to_higher_liege }
			}
			set_defacto_liege = THIS
		}

		clr_character_flag = set_to_higher_liege

		any_demesne_title = {
			limit = {
				OR = {
					tier = king
					tier = emperor
					is_primary_holder_title_tier = yes
				}
			}
			add_claim = FROM
		}
	}
}

# The liege is notified of the independence
character_event = {
	id = 63104
	desc = EVTDESC_63104
	picture = GFX_evt_emissary

	is_triggered_only = yes

	notification = yes

	option = {
		name = EVTOPTA_63104
	}

}

# Safety check event for flag clearace - do_not_disturb etc
character_event = {
	id = 63106

	hide_window = yes
	is_triggered_only = yes
	has_character_flag=do_not_disturb

	immediate = {
		if = {
			limit = {
				had_character_flag = { flag = do_not_disturb days = 1800 }  # Clears if flag has stayed on for 5 years approx
			}
			clr_character_flag = do_not_disturb
		}
	}
}

# BUY_FAVOR_ACCEPT_EVENT =
diploresponse_event = {
	id = 520
	desc = "EVTDESC520"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA520"
	}
}

# BUY_FAVOR_DECLINE_EVENT =
diploresponse_event = {
	id = 521
	desc = "EVTDESC521"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA521"
	}
}

# REQUEST_SUPPORT_ACCEPT_EVENT =
diploresponse_event = {
	id = 522
	desc = "EVTDESC522"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA522"
	}
}

# REQUEST_SUPPORT_DECLINE_EVENT =
diploresponse_event = {
	id = 523
	desc = "EVTDESC523"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA523"
	}
}

# FORM_NON_AGGRESSION_PACT_ACCEPT_EVENT =
diploresponse_event = {
	id = 524
	desc = "EVTDESC524"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA524"
	}
}

# FORM_NON_AGGRESSION_PACT_DECLINE_EVENT =
diploresponse_event = {
	id = 525
	desc = "EVTDESC525"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "EVTOPTA525"
	}
}

letter_event = {
	id = 750
	desc = "EVTDESC750"

	is_triggered_only = yes

	trigger = {
		ai = no
		is_voter = yes
	}

	option = {
		name = "EVTOPTA290"
		approve_law = FROM
	}

	option = {
		name = "EVTOPTB290"
	}
}

# ASK_COUNCIL_POSITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 526
	desc = "EVTDESC526"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
		custom_tooltip = { text = EVT527_TOOLTIP }
	}
}

# ASK_COUNCIL_POSITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 527
	desc = "EVTDESC527"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ASK_REALM_PEACE_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 528
	desc = "EVTDESC528"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# ASK_REALM_PEACE_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 529
	desc = "EVTDESC529"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORCE_JOIN_FACTION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 530
	desc = "EVTDESC530"

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# FORCE_JOIN_FACTION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 531
	desc = "EVTDESC531"

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

#Realm with designated regent or court physicians inherited by realm that already has a designated regent
character_event = {
	id = 532
	hide_window = yes

	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		OR = {
		  	AND = {
				OR = {
					any_courtier = {
						has_minor_title = title_appointed_regent
					}
					any_vassal = {
						has_minor_title = title_appointed_regent
				 	}
				}
				current_heir = {
					is_ruler = yes
					OR = {
						any_courtier = {
							has_minor_title = title_appointed_regent
						}
						any_vassal = {
						   has_minor_title = title_appointed_regent
						}
					}
				}
			}
			AND = {
				any_courtier_or_vassal = {
					has_minor_title = title_court_physician
					liege = { character = ROOT }
				}
				current_heir = {
					is_ruler = yes
					any_courtier_or_vassal = {
						has_minor_title = title_court_physician
						liege = { character = PREVPREV }
					}
				}
			}
		}
	}
	immediate = {
		if = {
			limit = {
				OR = {
					any_courtier = {
						has_minor_title = title_appointed_regent
					}
					any_vassal = {
						has_minor_title = title_appointed_regent
					}
				}
				current_heir = {
					is_ruler = yes
					OR = {
						any_courtier = {
							has_minor_title = title_appointed_regent
						}
						any_vassal = {
						   has_minor_title = title_appointed_regent
						}
					}
				}
			}
			random_courtier_or_vassal = {
				limit = {
					has_minor_title = title_appointed_regent
					liege = { character = ROOT }
				}
				remove_title = title_appointed_regent
			}
		}
		if = {
			limit = {
				any_courtier_or_vassal = {
					has_minor_title = title_court_physician
					liege = { character = ROOT }
				}
				current_heir = {
					is_ruler = yes
					any_courtier_or_vassal = {
						has_minor_title = title_court_physician
						liege = { character = PREVPREV }
					}
				}
			}
			random_courtier_or_vassal = {
				limit = {
					has_minor_title = title_court_physician
					liege = { character = ROOT }
				}
				remove_title = title_court_physician
			}
		}
	}
}

character_event = {
	id = 533
	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		FROM = {
			higher_tier_than = DUKE
			is_primary_holder_title = yes
		}
		FROMFROM = {
			any_vassal = {
				leads_faction = faction_powerful_vassal_takeover
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_replaced_bad_ruler } }
			}
		}
	}

	immediate = {
		FROMFROM = {
			any_vassal = {
				limit = {
					in_faction = faction_powerful_vassal_takeover
				}
				opinion = {
					who = ROOT
					modifier = opinion_replaced_bad_ruler
					years = 2
				}
			}
		}
	}
}

# Crusade/Jihad is invalidated
narrative_event = {

	# ROOT is the target title
	# new_character is the Enemy
	# FROM is the Pope/Caliph

	id = 534
	title = "EVTNAME534"
	picture = "GFX_evt_battle"
	border = "GFX_event_narrative_frame_religion"

	desc = {
		picture = GFX_evt_battle
		text = EVTDESC534_converted
		trigger = {
			new_character = { religion = FROM }
		}
	}
	desc = {
		picture = GFX_evt_battle
		text = EVTDESC534_coup
		trigger = {
			new_character = { NOT = { religion = FROM } }
		}
	}

	major = yes

	only_rulers = yes

	is_triggered_only = yes

	option = {
		name = "EVTOPTA620"
		trigger = {
			religion_group = FROM
		}
	}

	option = {
		name = "EVTOPTB620"
		trigger = {
			NOT = {
				religion_group = FROM
			}
		}
	}
}

# ASK_TO_JOIN_AMBITION_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 535

	is_triggered_only = yes
	major = no
	is_friendly = yes

	trigger = {
		ai = no
	}

	desc = "EVTDESC535"

	option = {
		name = "OK"
	}
}

# ASK_TO_JOIN_AMBITION_INTERACTION_DECLINE_EVENT =
diploresponse_event = {
	id = 536

	is_triggered_only = yes
	major = no

	trigger = {
		ai = no
	}

	desc = "EVTDESC536"

	option = {
		name = "OK"
	}
}

# OFFER_CONSORT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 537
	desc = EVTDESC537

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}

# GIVE_ARTIFACT_INTERACTION_ACCEPT_EVENT =
diploresponse_event = {
	id = 538
	desc = EVTDESC538

	major = no
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = "OK"
	}
}
## Inheritance of Lahmian queen trait ##
character_event = {
	id = 45340
	desc = "EVTDESC45340"
	picture = "GFX_evt_death"

	is_triggered_only = yes
	only_women = yes
    only_playable = yes

	hide_window = yes

immediate = {
		#Item Inheritance
		if = {
			limit = { trait = lahmian_queen NOT = { has_character_flag = do_not_inherit_sword } }
			if = {
				limit = {
					is_ruler = yes
					current_heir = {
						dynasty = ROOT
						is_alive = yes
						NOT = { trait = lahmian_queen }
					}
				}
				current_heir = {
					add_trait = lahmian_queen
				}
				add_trait = dead_target
			}
			if = {
				limit = { NOT = { trait = dead_target } is_patrician = yes }
				family_palace = {
					current_heir = {
						if = {
							limit = { NOT = { trait = lahmian_queen  } }
							add_trait = lahmian_queen
							ROOT = { add_trait = dead_target }
						}
					}
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_child = {
					limit = {
						dynasty = ROOT
						is_alive = yes

						NOT = { trait = lahmian_queen }
						NOT = {
							ROOT = {
								any_child = {
									dynasty = ROOT
									is_alive = yes
									NOT = { character = PREVPREV }
									is_older_than = PREVPREV
									NOT = { lower_tier_than = PREVPREV }

									NOT = { trait = lahmian_queen }
								}
							}
						}
					}
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_child = {
					limit = { dynasty = ROOT is_alive = yes NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_sibling = {
					limit = { dynasty = ROOT is_alive = yes NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_dynasty_member = {
					limit = { is_alive = yes NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_child = {
					limit = { is_primary_heir = yes is_alive = yes NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = { NOT = { trait = dead_target } }
				random_child = {
					limit = { is_alive = yes  NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
					ROOT = { add_trait = dead_target }
				}
			}
			if = {
				limit = {
					NOT = { trait = dead_target }
					spouse = { is_alive = yes NOT = { trait = lahmian_queen } }
				}
				spouse = { add_trait = lahmian_queen }
				add_trait = dead_target
			}
			if = {
				limit = {
					NOT = { trait = dead_target }
					liege = { NOT = { character = ROOT } NOT = { trait = lahmian_queen } }
				}
				liege = { add_trait = lahmian_queen }
				add_trait = dead_target
			}
			if = {
				limit = {
					NOT = { trait = dead_target }
					current_heir = { NOT = { character = ROOT } NOT = { trait = lahmian_queen } }
				}
				current_heir = {
					add_trait = lahmian_queen
				}
				add_trait = dead_target
			}
			if = {
				limit = {
					NOT = { trait = dead_target }
				}
				random_vassal = {
					limit = { NOT = { trait = lahmian_queen } }
					add_trait = lahmian_queen
				}
			}
			remove_trait = dead_target
		}
}
	option = {
		name = "OK"
	}

}
character_event = {
	id = 671

	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_rival = { religion = ROOT }

	}

	immediate = {
		any_rival = {
			limit = { religion = ROOT }
			character_event = { id = 100500 }
		}
	}
}

# On-action event: Avoided title revokation, declared independence
character_event = {
	id = 681
	desc = "EVTDESC681"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = "EVTOPTA150"
	}
}

# On-action event: Avoided vassal retraction, declared independence
character_event = {
	id = 682
	desc = "EVTDESC682"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = "EVTOPTA150"
	}
}
character_event = {
	id = 683
	desc = "EVTDESC683"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = "EVTOPTA150"
	}
}

# On-action event: Avoided clan split, declared independence
character_event = {
	id = 684
	desc = "EVTDESC684"
	picture = "GFX_evt_burning_house"
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = "EVTOPTA150"
	}
}
# On-action event: Remove in-hiding trait on imprisonment
character_event = {
	id = 685
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		trait = in_hiding
	}

	immediate = {
		remove_trait = in_hiding
	}
}
# Scripted default elective token setup
character_event = {
	id = 689
	hide_window = yes

	is_triggered_only = yes

	only_rulers = yes

	immediate = {
		any_demesne_title = {
			if = {
				limit = {
					has_law = succ_lady_elective
				}
				elective_voting_rules = lady_religious_elective
			}
			if = {
				limit = {
					has_law = succ_elective_gavelkind
				}
				elective_voting_rules = elective_gavelkind
			}
			else_if = {
				limit = {
					has_law = succ_tanistry
				}
				elective_voting_rules = tanistry
			}
			else_if = {
				limit = {
					has_law = succ_feudal_elective
				}
				elective_voting_rules = feudal_elective
			}
		}
	}
}

character_event = { #so arranger can be referred to in AI evalutation
	id = 50001

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		FROM = {
			opinion = { who = PREV modifier = opinion_recent_marriage months = 1 }
			reverse_opinion = { who = PREV modifier = opinion_recent_marriage months = 1 }
		}
	}

	option = {
		name = "OK"
	}
}

character_event = { #on marriage and betrothal
	id = 50002
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		FROM = { NOT = { has_character_flag = no_wedding_event } }
		NOT = { has_character_flag = no_wedding_event }
		OR = {
			character = FROM #Self

				FROM = { #Check the AI for all of these
					is_female=yes
					dynasty = ROOT
					OR = {
						is_child_of = ROOT
						father_even_if_dead = {
							OR = {
								is_child_of = ROOT
								sibling = ROOT
							}
						}
						mother_even_if_dead = {
							OR = {
								is_child_of = ROOT
								sibling = ROOT
							}
						}
						AND = {
							is_primary_heir = ROOT
							#ROOT = { primary_title = { NOT = { has_elective_law_trigger = yes } } }
						}
						sibling = ROOT
						is_parent_of = ROOT
					}
				}
			FROM = {
				OR = {
					any_heir_title = { higher_tier_than = BARON }
					any_pretender_title = { higher_tier_than = BARON }
				}
				NOT = { is_close_relative = ROOT }
			}
		}
	}

	immediate = {
		#Find spouse or betrothed
		new_character = { save_event_target_as = spouse_to_evaluate }
		#Patch 2.1.3 fucked this up, needs to trigger 1 day later now
		if = {
			limit = { ai = yes }
			character_event = { id = 50003 days = 2 } #AI marriage evaluation
		}
		if = {
			limit = {
				FROM = { #heirs/dragon riders being married off by non-relatives
					is_ruler = no
					OR = {
						any_heir_title = { higher_tier_than = BARON }
						any_pretender_title = { higher_tier_than = BARON }
					}
					NOT = { is_close_relative = ROOT }
					NAND = {
						has_character_flag = forced_betrothal
						has_opinion_modifier = { who = event_target:spouse_to_evaluate modifier = opinion_forced_marriage }
					}
				}
			}
			ROOT = { save_event_target_as = old_liege }
			FROM = { character_event = { id = 50003 days = 3 } } #AI marriage evaluation
		}
	}

	option = {
		name = OK
	}
}

character_event = {
	id = 50003

	is_triggered_only = yes
	#only_rulers = yes
	ai = yes
	hide_window = yes

	trigger = {
		FROMFROM = {
			OR = {
				is_married = yes
				is_betrothed = yes
			}
			NOT = {wh_marriage_exlusion_trigger = yes}
		}
	}

	immediate = {
		clear_event_target = savage
		#Determine nomadic marriage
		if = {
			limit = {
				is_ruler = yes
				is_nomadic = no
				is_tribal = no
				OR = {
					is_close_relative = FROMFROM
					current_heir = { character = FROMFROM }
				}
				event_target:spouse_to_evaluate = {
					NOT = { culture_group = ROOT }
					OR = {
						is_nomadic = yes
						culture_group = kurgan_group
						AND = {
							is_ruler = no
							liege = { is_nomadic = yes }
						}
						any_close_relative = { is_nomadic = yes }
					}
				}
			}
			event_target:spouse_to_evaluate = {
				if = {
					limit = {
						higher_tier_than = DUKE
						is_nomadic = yes
					}
					save_event_target_as = savage
				}
				else = {
					random_dynasty_member = {
						limit = {
							higher_tier_than = DUKE
							is_nomadic = yes
							has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
							NOT = { religion = ROOT }
							NOT = { culture_group = ROOT }
							OR = {
								is_close_relative = PREV
								dynasty = PREV
							}
						}
						save_event_target_as = savage
					}
				}
			}
		}
		# Determine ourbreeding marriage
		# if = {
			# limit = {
				# is_ruler = yes
				# NOT = { event_target:savage = { always = yes } }
				# event_target:spouse_to_evaluate = {
					# cannot_outbreed_trigger = yes
					# NOT = { graphical_culture = ROOT_FROMFROM }
				# }
			# }
			# event_target:spouse_to_evaluate = {
				# save_event_target_as = savage
			# }
		# }
	}

	option = {
		name = "I AM DERP AI" #If a female in a cognatic realm, ruler or primary heir try and get more matri marriages
		trigger = {
			NOT = { wh_marriage_exlusion_trigger = yes}
			is_ruler = yes
			OR = {
				character = FROMFROM #evaluate own marriage
				current_heir = { character = FROMFROM }
				AND = {
					is_close_relative = ROOT_FROM
					primary_title = {
						OR = {
							has_law = true_cognatic_succession
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}
					}
				}
			}
			FROMFROM = {
				is_female = yes
				NOT = { betrothed = { character=event_target:spouse_evaluation } } #cant distinguish between matrilineal or not
				NOT = { is_married_matrilineally = yes }
				NOT = { dynasty = 0 }
				NOT = { trait = bastard }
				NAND = {
					trait = disinherited
					ROOT = { has_character_flag = matri_inheritance_check }
				}
			}
			event_target:spouse_to_evaluate = { NOT = { dynasty = FROMFROM } }
		}
		ai_chance = { factor = 9999 }
		FROMFROM = {
			set_character_flag = no_wedding_event
			save_event_target_as = target_spouse
			if = { #If married to some bozo change to matrilineal immediately
				limit = {
					event_target:spouse_to_evaluate = {
						is_ruler = no
						OR = {
							dynasty = 0
							trait = bastard
							AND = {
								NOT = { father_even_if_dead = { always = yes } }
								NOT = { mother_even_if_dead = { always = yes } }
							}
						}
					}
				}
				if = {
					limit = { is_ruler = no }
					move_character = ROOT
				}
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = event_target:target_spouse
					add_spouse_matrilineal = event_target:target_spouse
					clr_character_flag = no_wedding_event
					if = {
						limit = { is_ruler = no }
						move_character = ROOT
					}
					#prestige = -150
					#child_fertility_debuff = yes #keeping it in like this for futher expansion in the future
				}
				#child_fertility_debuff = yes
				prestige = 250
				clr_character_flag = no_wedding_event
				break = yes
			}
			#To disinherit the daughter a spare relation must exist, or be a ruler
			if = {
				limit = {
					OR = {
						character = ROOT
						any_close_relative = {
							is_alive = yes
							dynasty = ROOT
							OR = {
								is_female = no
								is_married_matrilineally = yes
							}
							#can_press_claims_trigger = yes #keeping it in like this for futher expansion
							prisoner = no
							is_incapable = no
						}
					}
				}
				if = { #If NOT a ruler and spouse is equal or higher tier maybe keep the marriage
					limit = {
						NOT = { character = ROOT } #Not ruler
						event_target:spouse_to_evaluate = {
							NOR = {
								is_nomadic = yes
								culture_group = kurgan_group
							}
							OR = {
								AND = {
									is_ruler = yes
									ROOT = { NOT = { higher_tier_than = PREV } }
								}
								any_heir_title = { ROOT = { NOT = { higher_tier_than = PREV } } }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = {
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									ROOT = { NOT = { higher_tier_than = PREV } }
								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = {
							set_character_flag = matri_inheritance_check
							any_demesne_title = {
								limit = {
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}
								#add_law = dornish_succession
							}
							recalc_succession = yes
						}
						recalc_succession = yes
						clr_character_flag = no_wedding_event
						break = yes
					}
				}
				if = { #If IS a ruler and spouse higher tier maybe keep the marriage
					limit = {
						character = ROOT #Is ruler
						event_target:spouse_to_evaluate = {
							NOR = {
								is_nomadic = yes
								culture_group = kurgan_group
							}
							OR = {
								AND = {
									is_ruler = yes
									ROOT = { lower_tier_than = PREV }
								}
								any_heir_title = { ROOT = { lower_tier_than = PREV } }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = {
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									ROOT = { lower_tier_than = PREV }
								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = {
							set_character_flag = matri_inheritance_check
							any_demesne_title = {
								limit = {
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}
							}
							recalc_succession = yes
						}
						recalc_succession = yes
						clr_character_flag = no_wedding_event
						break = yes
					}
				}
				if = { #If not primary heir can maybe keep marriage if a good alliance
					limit = {
						is_primary_heir = no
						NOT = { character = ROOT }
						NOT = { any_heir_title = { always = yes } }
						any_sibling = {
							is_alive = yes
							is_older_than = PREV
							OR = {
								is_female = no
								is_married_matrilineally = yes
							}
							#can_press_claims_trigger = yes #keeping it in like this for futher expansion in the future
							prisoner = no
							is_incapable = no
						}
						event_target:spouse_to_evaluate = {
							NOR = {
								is_nomadic = yes
								culture_group = kurgan_group
							}
							OR = {
								AND = {
									is_ruler = yes
									higher_tier_than = COUNT
								}
								any_heir_title = { higher_tier_than = COUNT }
								any_claim = { ROOT = { lower_tier_than = PREV } }
								any_dynasty_member = {
									is_close_relative = PREV
									has_opinion_modifier = { who = ROOT modifier = opinion_recent_marriage }
									higher_tier_than = COUNT

								}
							}
						}
					}
					random = {
						chance = 75
						add_trait = disinherited
						ROOT = {
							set_character_flag = matri_inheritance_check
							any_demesne_title = {
								limit = {
									OR = {
										has_law = succ_primogeniture
										has_law = succ_gavelkind
									}
								}
							}
							recalc_succession = yes
						}
						recalc_succession = yes
						clr_character_flag = no_wedding_event
						break = yes
					}
				}
			}
			if = { #If still not good change to matrilineal if possible
				limit = {
					event_target:spouse_to_evaluate = {
						NOR = {
							is_nomadic = yes
							is_primary_heir = yes
							is_ruler = yes
							any_heir_title = { always = yes }
							any_pretender_title = { always = yes }
							father_even_if_dead = { is_ruler = yes }
							mother_even_if_dead = { is_ruler = yes }
							father_even_if_dead = { any_heir_title = { always = yes } }
							mother_even_if_dead = { any_heir_title = { always = yes } }
							any_sibling_even_if_dead = { is_ruler = yes }
							any_claim = { NOT = { lower_tier_than = ROOT } }
						}
					}
				}
				if = {
					limit = { is_ruler = no }
					move_character = ROOT
				}
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = PREV
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					if = {
						limit = { is_ruler = no }
						move_character = ROOT
					}
					#prestige = -150
					#child_fertility_debuff = yes #keeping it in like this for futher expansion in the future
				}
				#child_fertility_debuff = yes #keeping it in like this for futher expansion in the future
				prestige = 250
				clr_character_flag = no_wedding_event
				break = yes
			}
			#If still not valid, divorce and find a better match
			event_target:spouse_to_evaluate = { letter_event = { id = 50004 days = 2 } }
			remove_spouse = event_target:spouse_to_evaluate
			break_betrothal = event_target:spouse_to_evaluate
			if = {
				limit = { is_ruler = no }
				move_character = ROOT
			}
			prestige = 250
			ROOT = {
				random_realm_character = {
					limit = {
						age = 16
						OR = {
							NOT = { age = 30 } #need to adjust to take in to account long lived racesS
							immortal = yes
						}
						NOT = { same_sex = ROOT_FROMFROM }
						prisoner = no
						liege = {
							ai = yes
							NOT = { is_close_relative = PREV }
						}
						NOT = { graphical_culture = ROOT_FROMFROM }
						NOT = { is_close_relative = ROOT_FROMFROM }
						NOT = { dynasty = 0 }
						father_even_if_dead = { always = yes }
						NOR = {
							is_primary_heir = yes
							is_ruler = yes
							any_heir_title = { always = yes }
							any_pretender_title = { always = yes }
							father_even_if_dead = { is_ruler = yes }
							mother_even_if_dead = { is_ruler = yes }
							father_even_if_dead = { any_heir_title = { always = yes } }
							mother_even_if_dead = { any_heir_title = { always = yes } }
							any_sibling_even_if_dead = { is_ruler = yes }
							any_claim = { NOT = { lower_tier_than = ROOT } }
							#can_use_dragon_abilities_trigger = yes
						}
						NOT = { trait = celibate }
						is_incapable = no
						NOT = { trait = inbred }

						# NOT = { has_character_modifier = planning_claimant_adventure }
						# NOT = { has_character_modifier = maester_education }
						# NOT = { has_character_modifier = foreign_trainer }
						NOT = { liege = { is_theocracy = yes } }
					}
					liege = {
						opinion = { who = ROOT modifier = opinion_recent_marriage }
						reverse_opinion = { who = ROOT modifier = opinion_recent_marriage }
					}
					add_spouse_matrilineal = ROOT_FROMFROM
					ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
					break = yes
				}
			}
			#If still not married create a random character to marry her
			ROOT = {
				capital_scope = {
					ROOT = {
						create_character = {
							random_traits = yes
							dynasty = actually_culture
							culture = PREV
							religion = PREV
							female = no
							age = 21
						}
						new_character = {
							set_character_flag = no_wedding_event
							add_spouse_matrilineal = event_target:target_spouse
							random_list = {
								30 = { change_diplomacy=2 change_stewardship=2 } #bit of compansation for very low stats characters generated
								30 = { change_martial=2 change_stewardship=2 }
								30 = { change_intrigue=2 change_stewardship=2 }
								20 = { change_learning=2 change_stewardship=2 }
							}
							remove_trait = imbecile
							remove_trait = inbred
							remove_trait = idiot
							remove_trait = dumb
							remove_trait = dim
							remove_trait = fragile
							remove_trait = soft
							remove_trait = plain
							remove_trait = unsightly
							remove_trait = celibate
							remove_trait = infirm
							remove_trait = incapable
							remove_trait = leper
							remove_trait = possessed
							remove_trait = ill
							remove_trait = pneumonic
							remove_trait = maimed
							remove_trait = stutter
							remove_trait = weak
							remove_trait = harelip
						}
					}
				}
				ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
				break = yes	
			}
			clr_character_flag = no_wedding_event
			break = yes
		}
	}

	option = {
		name = "I AM DERP AI LOWBORN" #remove silly AI lowborn marriages, find vassal betrothal if possible
		trigger = {
			higher_tier_than = COUNT #The liege fellow that is getting married
			OR = {
				FROMFROM = { #fellow that is getting married
					is_close_relative = ROOT
				}
				character = FROMFROM #evaluate own marriage
				current_heir = { character = FROMFROM }
			}
			FROMFROM = {
				OR = {
					NOT = { age = 40 } #need to adjust to take in to account long lived racesS
					immortal = yes
				}
				NOT = { dynasty = 0 }
				NOT = { trait = bastard }
				OR = {
					event_target:spouse_to_evaluate = { dynasty = 0 }
					AND = {
						event_target:spouse_to_evaluate = {
							trait = bastard
							is_ruler = no
							liege = { character = ROOT }
						}
						is_female = yes
						is_married_matrilineally = no
					}
				}
				NOT = { has_character_flag = keep_lowborn_marriage }
			}
		}
		ai_chance = { factor = 9999 }
		FROMFROM = {
			set_character_flag = no_wedding_event #stop event triggering twice
			if = {
				limit = { is_female = yes }
				#child_fertility_debuff = yes #keeping it in like this for futher expansion in the future
				event_target:spouse_to_evaluate = {
					set_character_flag = no_wedding_event
					remove_spouse = PREV
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					#child_fertility_debuff = yes #keeping it in like this for futher expansion in the future
				}
				clr_character_flag = no_wedding_event
			}
			#First try and find vassal with suitable bride
			if = {
				limit = { is_female = no }
				ROOT = {
					random_realm_lord = {
						limit = {
							OR = {
								AND = {
									tier = COUNT
									ROOT = { tier = DUKE }
								}
								# AND = {
									# tier = COUNT
									# culture_group = valyrian
									# culture_group = ROOT
								# }
								higher_tier_than = COUNT
							}
							ai = yes
							religion = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no
							opinion = { who = ROOT value = -15 }
							any_courtier = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								NOT = { graphical_culture = ROOT_FROMFROM }
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } } #need to adjuest for long live races
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
						}
						random_courtier = {
							limit = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								NOT = { graphical_culture = ROOT_FROMFROM }

								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } } #need to adjuest for long live races
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
							ROOT_FROMFROM = {
								event_target:spouse_to_evaluate = {
									remove_spouse = PREV
									break_betrothal = PREV
								}
							}

							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
							#child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }

							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }
								# }
								# ROOT_FROMFROM = {
									# remove_character_modifier = wedding
									# add_betrothal = PREV
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes
						}
					}
					liege = { #Then try a fellow same tier vassal
						random_realm_lord = {
							limit = {
								tier = ROOT
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								ai = yes
								religion = ROOT
								culture_group = ROOT
								NOT = { dynasty = 0 }
								is_theocracy = no
								opinion = { who = ROOT value = -15 }
								reverse_opinion = { who = ROOT value = -15 }
								any_courtier = {
									OR = {
										NOT = { age = 30 } #need to adjust to take in to account long lived racesS
										immortal = yes
									}
									is_ruler = no
									NOT = { same_sex = ROOT_FROMFROM }
									dynasty = PREV
									is_close_relative = PREV
									#can_marry_trigger = yes #keeping it in like this for futher expansion in the future
									NOT = { graphical_culture = ROOT_FROMFROM }
									is_pregnant = no
									NOT = { trait = celibate }
									NOT = { trait = inbred }
									OR = {
										NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } } #need to adjuest for long live races
										AND = {
											ROOT_FROMFROM = { age = 18 }
											age = 18
										}
										AND = {
											ROOT_FROMFROM={ immortal=yes }
											immortal = yes
										}
									}
								}
							}
							random_courtier = {
								limit = {
									OR = {
										NOT = { age = 30 } #need to adjust to take in to account long lived racesS
										immortal = yes
									}
									is_ruler = no
									NOT = { same_sex = ROOT_FROMFROM }
									dynasty = PREV
									is_close_relative = PREV
									#can_marry_trigger = yes #keeping it in like this for futher expansion in the future
									NOT = { graphical_culture = ROOT_FROMFROM }
									is_pregnant = no
									NOT = { trait = celibate }
									NOT = { trait = inbred }		#need to adjuest for long live races
									OR = {
										NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } } #need to adjuest for long live races
										AND = {
											ROOT_FROMFROM = { age = 18 }
											age = 18
										}
										AND = {
											ROOT_FROMFROM={ immortal=yes }
											immortal = yes
										}
									}
								}
								ROOT_FROMFROM = {
									event_target:spouse_to_evaluate = {
										remove_spouse = PREV
										break_betrothal = PREV
									}
								}
								add_spouse = ROOT_FROMFROM
								PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								#child_fertility_debuff = yes
								ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
								break = yes

								# ###old block, betrothal command is broken NOW WORKS...or maybe not
								# if = {
									# limit = {
										# age = 14
										# ROOT_FROMFROM = { age = 14 }
									# }
									# add_spouse = ROOT_FROMFROM
									# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
									# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
								# }
								# if = {
									# limit = {
										# OR = {
											# NOT = { age = 14 }
											# ROOT_FROMFROM = { NOT = { age = 14 } }
										# }
									# }
									# ROOT_FROMFROM = {
										# remove_character_modifier = wedding
										# add_betrothal = PREV
									# }
									# add_betrothal = ROOT_FROMFROM
								# }
							}
						}
					}
				}
				#If still no-one found give bride a random dynasty and parents
				event_target:spouse_to_evaluate = {
					if = {
						limit = {
							dynasty = 0
							father_even_if_dead = { dynasty = 0 }
						}
						dynasty = father_bastard
						father_even_if_dead = { dynasty = PREV }
					}
					if = {
						limit = {
							dynasty = 0
							NOT = { father_even_if_dead = { always = yes } }
							NOT = { mother_even_if_dead = { always = yes } }
						}
						ROOT = {
							create_character = {
								random_traits = yes
								dynasty = random
								female = no
								age = 45
								culture = PREV
								religion = ROOT
							}
							new_character = {
							random_list = {
								30 = { change_diplomacy=2 change_stewardship=2 } #bit of compansation for very low stats characters generated
								30 = { change_martial=2 change_stewardship=2 }
								30 = { change_intrigue=2 change_stewardship=2 }
								30 = { change_learning=2 change_stewardship=2 }
							}
								event_target:spouse_to_evaluate = {
									set_father = PREV
									dynasty = PREV
								}
							}
							create_character = {
								random_traits = yes
								dynasty = none
								female = yes
								age = 45
								culture = PREV
								religion = ROOT
							}
							new_character = {
								event_target:spouse_to_evaluate = {
									set_mother = PREV
									father = { add_spouse = PREVPREV }
								}
							}
						}
					}
				}
				clr_character_flag = no_wedding_event
				break = yes	
			}
			clr_character_flag = no_wedding_event
			break = yes
		}
	}


	option = {
		name = "WHY AM I MARRYING A SAVAGE?" #Perhaps change nomad marriage, who can marry anyone freely for some reason
		trigger = {
			event_target:savage = { always = yes }
			NOT = { wh_marriage_exlusion_trigger = yes}
		}
		ai_chance = {
			factor = 9999
			modifier = { #OK if a powerful neighbour
				factor = 0
				NOR = {
					trait = zealous
					trait = proud
				}
				event_target:savage = {
					tier = EMPEROR
					is_nomadic = yes
					relative_power = { who = ROOT power = 1 }
					prestige = 2500
					any_realm_province = { any_neighbor_province = { owner = { same_realm = ROOT } } }
				}
			}
			modifier = { #OK if very powerful
				factor = 0
				NOR = {
					trait = zealous
					trait = proud
				}
				event_target:savage = {
					tier = EMPEROR
					is_nomadic = yes
					OR = {
						relative_power = { who = ROOT power = 3 }
						AND = {
							relative_power = { who = ROOT power = 0.75 }
						}
					}
					prestige = 3500
					# OR = {
						# any_realm_province = { region = world_old_world_empire }
						# ROOT = { any_realm_province = { NOT = { region = world_old_world_empire } } } #keeping it in like this for futher expansion in the future (for limiting regions)
					# }
				}
			}
		}
		prestige = 75
		event_target:savage = {
			letter_event = { id = 55555 }
		}
		FROMFROM = {
			set_character_flag = no_wedding_event #stop event triggering twice
			#Remove the nomadic spouse
			event_target:spouse_to_evaluate = {
				remove_spouse = PREV
				break_betrothal = PREV
				if = {
					limit = {
						#cannot_outbreed_trigger = yes
						NOT = { graphical_culture = ROOT_FROMFROM }
						is_ruler = no
						liege = { NOT = { is_close_relative = PREV } }
					}
					random_playable_ruler = {
						# limit = {
							# valid_exile_destination_ROOT_trigger = yes			#Not sure how exactly this works. play testing shows tho that ai returns to it's original court.
							# culture = PREV
						# }
						reverse_banish = PREV
					}
				}
			}
			if = {
				limit = { is_ruler = no }
				move_character = ROOT
			}
			#First try and find vassal with suitable bride
			ROOT = {
				random_realm_lord = {
					limit = {
						OR = {
							AND = {
								tier = COUNT
								ROOT = { tier = DUKE }
							}
							higher_tier_than = COUNT
						}
						ai = yes
						religion = ROOT
						NOT = { dynasty = 0 }
						is_theocracy = no
						opinion = { who = ROOT value = -15 }
						any_courtier = {
							OR = {
								NOT = { age = 30 } #need to adjust to take in to account long lived racesS
								immortal = yes
							}
							is_ruler = no
							NOT = { same_sex = ROOT_FROMFROM }
							dynasty = PREV
							is_close_relative = PREV
							#can_marry_trigger = yes
							NOT = { graphical_culture = ROOT_FROMFROM }
							is_pregnant = no
							NOT = { trait = celibate }
							NOT = { trait = inbred }
							OR = {
								NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
								AND = {
									ROOT_FROMFROM = { age = 18 }
									age = 18
								}
								AND = {
									ROOT_FROMFROM={ immortal=yes }
									immortal = yes
								}
							}
						}
					}
					random_courtier = {
						limit = {
							OR = {
								NOT = { age = 30 } #need to adjust to take in to account long lived racesS
								immortal = yes
							}
							is_ruler = no
							NOT = { same_sex = ROOT_FROMFROM }
							dynasty = PREV
							is_close_relative = PREV
							#can_marry_trigger = yes
							NOT = { graphical_culture = ROOT_FROMFROM }
							is_pregnant = no
							NOT = { trait = celibate }
							NOT = { trait = inbred }
							OR = {
								NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
								AND = {
									ROOT_FROMFROM = { age = 18 }
									age = 18
								}
								AND = {
									ROOT_FROMFROM={ immortal=yes }
									immortal = yes
								}
							}
						}
						add_spouse = ROOT_FROMFROM
						PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
						#child_fertility_debuff = yes
						ROOT_FROMFROM = { clr_character_flag = no_wedding_event }

						# ###old block, betrothal command is broken NOW WORKS...or maybe not
						# if = {
							# limit = {
								# age = 14
								# ROOT_FROMFROM = { age = 14 }
							# }
							# add_spouse = ROOT_FROMFROM
							# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
							# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
						# }
						# if = {
							# limit = {
								# OR = {
									# NOT = { age = 14 }
									# ROOT_FROMFROM = { NOT = { age = 14 } }
								# }
							# }
							# ROOT_FROMFROM = {
								# remove_character_modifier = wedding
								# add_betrothal = PREV
							# }
							# add_betrothal = ROOT_FROMFROM
						# }
						break = yes
					}
				}
				#Then try a fellow same tier vassal
				liege = {
					random_realm_lord = {
						limit = {
							tier = ROOT
							NOT = { character = ROOT }
							ai = yes
							religion = ROOT
							culture_group = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no
							opinion = { who = ROOT value = -15 }
							reverse_opinion = { who = ROOT value = -15 }
							any_courtier = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								#can_marry_trigger = yes
								NOT = { graphical_culture = ROOT_FROMFROM }
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
						}
						random_courtier = {
							limit = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								#can_marry_trigger = yes
								NOT = { graphical_culture = ROOT_FROMFROM }

								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
							#child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }

							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }
								# }
								# ROOT_FROMFROM = {
									# remove_character_modifier = wedding
									# add_betrothal = PREV
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes
						}
					}
				}
				#Then try a any vassal in realm
				top_liege = {
					random_realm_lord = {
						limit = {
							OR = {
								tier = ROOT
								AND = {
									tier = COUNT
									ROOT = { tier = DUKE }
								}
								higher_tier_than = COUNT
							}
							NOT = { character = ROOT }
							ai = yes
							religion = ROOT
							culture_group = ROOT
							NOT = { dynasty = 0 }
							is_theocracy = no
							opinion = { who = ROOT value = -15 }
							reverse_opinion = { who = ROOT value = -15 }
							any_courtier = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								#can_marry_trigger = yes
								NOT = { graphical_culture = ROOT_FROMFROM }
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
						}
						random_courtier = {
							limit = {
								OR = {
									NOT = { age = 30 } #need to adjust to take in to account long lived racesS
									immortal = yes
								}
								is_ruler = no
								NOT = { same_sex = ROOT_FROMFROM }
								dynasty = PREV
								is_close_relative = PREV
								#can_marry_trigger = yes
								NOT = { graphical_culture = ROOT_FROMFROM }
								is_pregnant = no
								NOT = { trait = celibate }
								NOT = { trait = inbred }
								OR = {
									NOT = { age_diff = { who = ROOT_FROMFROM years = 10 } }
									AND = {
										ROOT_FROMFROM = { age = 18 }
										age = 18
									}
									AND = {
										ROOT_FROMFROM={ immortal=yes }
										immortal = yes
									}
								}
							}
							add_spouse = ROOT_FROMFROM
							PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
							#child_fertility_debuff = yes
							ROOT_FROMFROM = { clr_character_flag = no_wedding_event }

							# ###old block, betrothal command is broken NOW WORKS...or maybe not
							# if = {
								# limit = {
									# age = 14
									# ROOT_FROMFROM = { age = 14 }
								# }
								# add_spouse = ROOT_FROMFROM
								# PREV = { opinion = { who = ROOT modifier = opinion_recent_marriage } }
								# ROOT_FROMFROM = { clr_character_flag = no_wedding_event }
							# }
							# if = {
								# limit = {
									# OR = {
										# NOT = { age = 14 }
										# ROOT_FROMFROM = { NOT = { age = 14 } }
									# }
								# }
								# ROOT_FROMFROM = {
									# remove_character_modifier = wedding
									# add_betrothal = PREV
								# }
								# add_betrothal = ROOT_FROMFROM
							# }
							break = yes
						}
					}
				}
			}
			clr_character_flag = no_wedding_event
			break = yes
			#If no marriage found, add temp fertility malus to prevent another marriage
			# add_character_modifier = {
				# name = child
				# duration = 400
				# hidden = yes
			# }
		}
	}

	option = {
		name = OK
		ai_chance = { factor = 1 }
	}
}

letter_event = {
	id = 50004

	is_triggered_only = yes

	desc = {
		text = "EVTDESC50099"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROM } }
			FROM = {
				primary_title = {
					OR = {
						has_law = true_cognatic_succession
						has_law = enatic_cognatic_succession
						has_law = enatic_succession
					}
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50099B"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROM } }
			NOT = {
				FROM = {
					primary_title = {
						OR = {
							has_law = true_cognatic_succession
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}
					}
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50099C"
		trigger = {
			event_target:invalid_bride = { character = FROM }
		}
	}

	immediate = {
		if = {
			limit = { ai = no }
			FROMFROMFROM = { save_event_target_as = invalid_bride } #for loc
		}
	}

	option = {
		name = OK
		tooltip = { remove_spouse = FROMFROMFROM }
		random_dynasty_member = {
			limit = {
				is_close_relative = ROOT
				NOT = { character = ROOT }
				OR = {
					has_opinion_modifier = { who = FROM modifier = opinion_recent_marriage }
					is_liege_of = ROOT
				}
			}
			remove_opinion = { who = FROM modifier = opinion_recent_marriage }
			letter_event = { id = 55556 }
		}
	}
}

letter_event = {
	id = 55556

	is_triggered_only = yes
	show_from_from = yes

	desc = {
		text = "EVTDESC50097"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROMFROM } }
			FROMFROM = {
				primary_title = {
					OR = {
						has_law = true_cognatic_succession
						has_law = enatic_cognatic_succession
						has_law = enatic_succession
					}
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50097B"
		trigger = {
			NOT = { event_target:invalid_bride = { character = FROMFROM } }
			NOT = {
				FROMFROM = {
					primary_title = {
						OR = {
							has_law = true_cognatic_succession
							has_law = enatic_cognatic_succession
							has_law = enatic_succession
						}
					}
				}
			}
		}
	}
	desc = {
		text = "EVTDESC50097C"
		trigger = {
			event_target:invalid_bride = { character = FROMFROM }
		}
	}

	immediate = {
		if = {
			limit = { ai = no }
			FROMFROMFROMFROM = { save_event_target_as = invalid_bride } #for loc
		}
	}

	option = {
		name = OK
	}
}

letter_event = {
	id = 55555

	desc = {
		text = "EVTDESC500994"
		trigger = { is_nomadic = yes }
	}

	is_triggered_only = yes

	option = {
		name = EVTOPTA500994
		trigger = { is_nomadic = yes }
	}

}
character_event = {
	id = 55520

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		any_artifact = {
			limit = {
				OR = {
					has_artifact_flag = no_inherit
					has_artifact_flag = curse
				}
			}

			hidden_effect = {
				unsafe_destroy_artifact = yes
			}
		}
	}
	option = {
		name = OK
	}
}
